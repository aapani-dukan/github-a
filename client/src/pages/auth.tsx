// client/src/pages/auth.tsx
"use client";
import React, { useState } from "react";
import { signInWithGoogle } from "@/lib/firebase";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Store } from "lucide-react";
import { useLocation } from "wouter";

export default function AuthPage() {
  const [isLoading, setIsLoading] = useState(false);
  const [, navigate] = useLocation();

  const handleGoogleSignIn = async () => {
    try {
      setIsLoading(true);

      /* 1Ô∏è‚É£ Firebase popup/redirect */
      const result = await signInWithGoogle();
      const fbUser = result.user;
      if (!fbUser) return;

      /* 2Ô∏è‚É£ Firebase ID-Token */
      const token = await fbUser.getIdToken();

      /* 3Ô∏è‚É£ üîí Backend /api/auth/login */
      const res = await fetch("/api/auth/login?role=seller", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          firebaseUid: fbUser.uid,
          email: fbUser.email!,
          name: fbUser.displayName || fbUser.email!,
        }),
      });

      if (!res.ok) {
        const err = await res.json().catch(() => ({}));
        throw new Error(err.message || res.statusText);
      }

      /* 4Ô∏è‚É£ Server response ‚Üí user object + role */
      const { user: userObject } = await res.json(); // ‚úÖ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§¨‡•à‡§ï‡§è‡§Ç‡§° 'user' ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§ï‡•á ‡§§‡§π‡§§ ‡§°‡•á‡§ü‡§æ ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à

      // ‚úÖ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø 'uuid' ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à
      if (!userObject || !userObject.uuid) {
        throw new Error("User UUID missing from backend response!");
      }

      // ‚úÖ userObject.role ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
      if (!userObject.role) {
        throw new Error("User role missing from backend!");
      }

      console.log("AuthPage: Backend user object received:", userObject); // ‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•â‡§ó ‡§ï‡§∞‡•á‡§Ç

      /* 5Ô∏è‚É£ Final redirect logic */
      // userObject.role ‡§î‡§∞ userObject.approvalStatus (‡§Ø‡§¶‡§ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§π‡•à) ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
      switch (userObject.role) {
        case "seller":
          // ‡§Ø‡§¶‡§ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§π‡•à, ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç
          if (userObject.approvalStatus === "approved") {
            navigate("/seller-dashboard");
          }
          // ‡§Ø‡§¶‡§ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§π‡•à, ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§™‡•É‡§∑‡•ç‡§† ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç
          else if (userObject.approvalStatus === "pending") {
            navigate("/seller-status");
          }
          // ‡§Ø‡§¶‡§ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§π‡•à (‡§ú‡•à‡§∏‡•á 'rejected' ‡§Ø‡§æ 'none'), ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•É‡§∑‡•ç‡§† ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç
          else {
            navigate("/seller-apply");
          }
          break;

        case "admin":
          navigate("/admin-dashboard");
          break;

        case "delivery":
          navigate("/delivery-dashboard");
          break;

        case "customer":
        default:
          // ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§Ø‡§æ ‡§Ö‡§®‡•ç‡§Ø ‡§Ö‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§æ‡§∂‡§ø‡§§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§π‡•ã‡§Æ‡§™‡•á‡§ú ‡§Ø‡§æ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç
          navigate("/seller-apply"); // ‡§Ø‡§æ "/" ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§π‡•ã‡§Æ‡§™‡•á‡§ú ‡§™‡§∞ ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç
          break;
      }
    } catch (err: any) { // 'any' ‡§ü‡§æ‡§á‡§™ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§§‡§æ‡§ï‡§ø 'err.message' ‡§ï‡•ã ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á
      console.error("Auth error:", err);
      alert(`Login failed: ${err.message || "Please try again."}`); // ‡§è‡§∞‡§∞ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">
      <div className="max-w-md w-full">
        <Card className="bg-white rounded-2xl shadow-xl">
          <CardContent className="p-8 text-center">
            <div className="mb-8">
              <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                <Store className="text-white w-8 h-8" />
              </div>
              <h1 className="text-2xl font-semibold text-gray-900 mb-2">
                Welcome Back
              </h1>
              <p className="text-gray-600">Sign in to continue</p>
            </div>

            <Button
              onClick={handleGoogleSignIn}
              disabled={isLoading}
              className="w-full"
              variant="outline"
            >
              {isLoading ? "Signing in‚Ä¶" : "Continue with Google"}
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
