// client/src/pages/auth.tsx
"use client";
import React, { useState } from "react";
import { signInWithGoogle } from "@/lib/firebase";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Store } from "lucide-react";
import { useLocation } from "wouter";
import { useAuth } from "@/hooks/useAuth"; // тЬЕ useAuth рд╣реБрдХ рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ

export default function AuthPage() {
  const [isLoading, setIsLoading] = useState(false);
  const [, navigate] = useLocation();
  const { login } = useAuth(); // тЬЕ useAuth рд╣реБрдХ рд╕реЗ рд▓реЙрдЧрд┐рди рдлрдВрдХреНрд╢рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ

  const handleGoogleSignIn = async () => {
    try {
      setIsLoading(true);

      /* 1я╕ПтГг Firebase popup/redirect */
      const result = await signInWithGoogle();
      const fbUser = result.user;
      if (!fbUser) {
        // рдпрджрд┐ рдпреВрдЬрд░ рдкреЙрдкрдЕрдк рдмрдВрдж рдХрд░ рджреЗ рдпрд╛ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рд╣реЛ
        setIsLoading(false);
        return;
      }

      /* 2я╕ПтГг Firebase ID-Token */
      const token = await fbUser.getIdToken();

      /* 3я╕ПтГг ЁЯФТ Backend /api/auth/login - рдЕрдм useAuth рдХреЗ login рдлрдВрдХреНрд╢рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ */
      // тЬЕ useAuth рдХреЗ login рдлрдВрдХреНрд╢рди рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВ
      const userObject = await login(token, false); // `false` рдХреНрдпреЛрдВрдХрд┐ рдпрд╣ рдХреЗрд╡рд▓ рд▓реЙрдЧрд┐рди рдкреЗрдЬ рд╣реИ, рд╕реЗрд▓рд░ рдЖрд╡реЗрджрди рдирд╣реАрдВ

      if (!userObject) {
        throw new Error("Login failed: Could not get user data from backend.");
      }

      // тЬЕ userObject.role рдФрд░ userObject.approvalStatus (рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рд╣реИ) рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
      switch (userObject.role) {
        case "seller":
          // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рд╕реНрд╡реАрдХреГрдд рд╣реИ, рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдЬрд╛рдПрдВ
          if (userObject.approvalStatus === "approved") {
            navigate("/seller-dashboard");
          }
          // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рд▓рдВрдмрд┐рдд рд╣реИ, рд╕реНрдерд┐рддрд┐ рдкреГрд╖реНрда рдкрд░ рдЬрд╛рдПрдВ
          else if (userObject.approvalStatus === "pending") {
            navigate("/seller-status");
          }
          // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рдХрд┐рд╕реА рдЕрдиреНрдп рд╕реНрдерд┐рддрд┐ рдореЗрдВ рд╣реИ (рдЬреИрд╕реЗ 'rejected'), рдЖрд╡реЗрджрди рдкреГрд╖реНрда рдкрд░ рдЬрд╛рдПрдВ
          else {
            navigate("/seller-apply");
          }
          break;

        case "admin":
          navigate("/admin-dashboard");
          break;

        case "delivery":
          navigate("/delivery-dashboard");
          break;

        case "customer":
        default:
          // рдЧреНрд░рд╛рд╣рдХ рдпрд╛ рдЕрдиреНрдп рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рднреВрдорд┐рдХрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд╣реЛрдордкреЗрдЬ рдпрд╛ рд╡рд┐рдХреНрд░реЗрддрд╛ рдЖрд╡реЗрджрди рдкрд░ рдЬрд╛рдПрдВ
          navigate("/"); // рд╣реЛрдордкреЗрдЬ рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
          break;
      }
    } catch (err: any) {
      console.error("Auth error:", err);
      alert(`Login failed: ${err.message || "Please try again."}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">
      <div className="max-w-md w-full">
        <Card className="bg-white rounded-2xl shadow-xl">
          <CardContent className="p-8 text-center">
            <div className="mb-8">
              <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                <Store className="text-white w-8 h-8" />
              </div>
              <h1 className="text-2xl font-semibold text-gray-900 mb-2">
                Welcome Back
              </h1>
              <p className="text-gray-600">Sign in to continue</p>
            </div>

            <Button
              onClick={handleGoogleSignIn}
              disabled={isLoading}
              className="w-full"
              variant="outline"
            >
              {isLoading ? "Signing inтАж" : "Continue with Google"}
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

