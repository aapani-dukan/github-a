// client/src/hooks/useAuth.tsx
import { useEffect, useState } from "react";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { firebaseOnAuthStateChanged, handleGoogleRedirectResult, firebaseSignOut } from "@/lib/firebase"; // рдирдП рдПрдХреНрд╕рдкреЛрд░реНрдЯреНрд╕ рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
import type { User as FirebaseUser } from "firebase/auth"; // FirebaseUser рдЯрд╛рдЗрдк рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
import axios from "axios"; // axios рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ

interface User {
  uid: string;
  email: string | null;
  firstName?: string;
  lastName?: string;
  role?: "customer" | "seller" | "admin" | "delivery" | "approved-seller" | "not-approved-seller" | null;
  // `seller` property is managed by useSeller hook, not here directly
}

export const useAuth = () => {
  const queryClient = useQueryClient();
  const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);
  const [isFirebaseLoading, setIsFirebaseLoading] = useState(true);

  useEffect(() => {
    // 1. Firebase рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдкрд░рд┐рдгрд╛рдо рдХреЛ рд╕рдВрднрд╛рд▓реЗрдВ (рдкрд╣рд▓реА рдмрд╛рд░ рдкреЗрдЬ рд▓реЛрдб рд╣реЛрдиреЗ рдкрд░)
    const processRedirectAndListen = async () => {
      try {
        const result = await handleGoogleRedirectResult(); // Firebase рд╕реЗ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдкрд░рд┐рдгрд╛рдо рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
        if (result) {
          // рдпрджрд┐ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдкрд░рд┐рдгрд╛рдо рд╣реИ, рддреЛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ Firebase рд╕реЗ рд╕реЗрдЯ рдХрд░реЗрдВ
          setFirebaseUser(result.user);
          console.log("тЬЕ useAuth: Google Redirect result processed!");
          // рддреБрд░рдВрдд рдмреИрдХрдПрдВрдб рдбреЗрдЯрд╛ рдХреЛ рдЗрдирд╡реИрд▓рд┐рдбреЗрдЯ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдпрд╣ рдирдпрд╛ рдбреЗрдЯрд╛ рдлреЗрдЪ рдХрд░реЗ
          queryClient.invalidateQueries({ queryKey: ["/api/auth/user"] });
        }
      } catch (error) {
        console.error("тЭМ useAuth: Error processing Google Redirect result:", error);
        // рдпрд╣рд╛рдВ рддреНрд░реБрдЯрд┐ рд╣реИрдВрдбрд▓рд┐рдВрдЧ рдХрд░реЗрдВ, рдЬреИрд╕реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд▓реЙрдЧрдЖрдЙрдЯ рдХрд░рдирд╛ рдпрд╛ рддреНрд░реБрдЯрд┐ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдирд╛
        firebaseSignOut(); // рддреНрд░реБрдЯрд┐ рдкрд░ рд▓реЙрдЧрдЖрдЙрдЯ рдХрд░рдирд╛ рдЙрдЪрд┐рдд рд╣реЛ рд╕рдХрддрд╛ рд╣реИ
      } finally {
        // 2. onAuthStateChanged рд▓рд┐рд╕рдирд░ рдХреЛ рд╕реЗрдЯ рдХрд░реЗрдВ
        // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ Firebase рдСрде рд╕реНрдЯреЗрдЯ рдореЗрдВ рдХрд┐рд╕реА рднреА рдмрджрд▓рд╛рд╡ рдХреЛ рдкрдХрдбрд╝рд╛ рдЬрд╛рдП (рд▓реЙрдЧрд┐рди/рд▓реЙрдЧрдЖрдЙрдЯ/рдЯреЛрдХрди рд░рд┐рдлреНрд░реЗрд╢)
        const unsubscribe = firebaseOnAuthStateChanged((user) => {
          setFirebaseUser(user);
          setIsFirebaseLoading(false); // Firebase рд▓реЛрдбрд┐рдВрдЧ рд╕рдорд╛рдкреНрдд
          // рдЬрдм Firebase рдСрде рд╕реНрдЯреЗрдЯ рдмрджрд▓рддрд╛ рд╣реИ, рддреЛ backend user query рдХреЛ рдЗрдирд╡реИрд▓рд┐рдбреЗрдЯ рдХрд░реЗрдВ
          queryClient.invalidateQueries({ queryKey: ["/api/auth/user"] }); 
          console.log("ЁЯФе Firebase onAuthStateChanged: User changed to", user ? user.uid : "null");
        });
        return () => unsubscribe(); // рдХреЙрдореНрдкреЛрдиреЗрдВрдЯ рдЕрдирдорд╛рдЙрдВрдЯ рд╣реЛрдиреЗ рдкрд░ рд▓рд┐рд╕рдирд░ рдХреЛ рдХреНрд▓реАрдирдЕрдк рдХрд░реЗрдВ
      }
    };

    processRedirectAndListen();
  }, [queryClient]); // queryClient dependencies array рдореЗрдВ рд╣реИ

  // React Query рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЕрдкрдиреЗ рдмреИрдХрдПрдВрдб рд╕реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╡рд┐рд╡рд░рдг рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
  const { data: backendUser, isLoading: isBackendLoading } = useQuery<User>({
    queryKey: ["/api/auth/user"],
    queryFn: async () => {
      if (!firebaseUser) {
        // рдпрджрд┐ рдХреЛрдИ Firebase рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рд╣реИ, рддреЛ backend fetch рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рди рдХрд░реЗрдВ
        return Promise.reject(new Error("No Firebase user found for backend fetch."));
      }
      const idToken = await firebaseUser.getIdToken();
      const response = await axios.get("/api/auth/me", {
        headers: { Authorization: `Bearer ${idToken}` },
      });
      // тЬЕ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдХрд╛ backend JSON рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЗ рд╕рд╛рде user data рд▓реМрдЯрд╛рддрд╛ рд╣реИ
      return response.data; 
    },
    // рдЗрд╕ рдХреНрд╡реЗрд░реА рдХреЛ рдХреЗрд╡рд▓ рддрднреА рд╕рдХреНрд╖рдо рдХрд░реЗрдВ рдЬрдм Firebase рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдореМрдЬреВрдж рд╣реЛ рдФрд░ Firebase рд▓реЛрдбрд┐рдВрдЧ рд╕рдорд╛рдкреНрдд рд╣реЛ
    enabled: !!firebaseUser && !isFirebaseLoading, 
    retry: false, // рдСрдереЗрдВрдЯрд┐рдХреЗрд╢рди рдореБрджреНрджреЛрдВ рдкрд░ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рди рдХрд░реЗрдВ
    staleTime: 5 * 60 * 1000, // рдбреЗрдЯрд╛ рдХреЛ 5 рдорд┐рдирдЯ рдХреЗ рд▓рд┐рдП рддрд╛рдЬрд╛ рдорд╛рдиреЗрдВ
    // рдпрджрд┐ backend fetch рд╡рд┐рдлрд▓ рд░рд╣рддрд╛ рд╣реИ (рдЬреИрд╕реЗ 401 Unauthorized), рддреЛ Firebase рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд▓реЙрдЧрдЖрдЙрдЯ рдХрд░реЗрдВ
    onError: (error) => {
      console.error("тЭМ useAuth: Error fetching user data from backend:", error);
      // рдпрджрд┐ рдпрд╣ 401 рдпрд╛ 403 рд╣реИ, рддреЛ Firebase рд╕рддреНрд░ рдХреЛ рднреА рд╕рд╛рдлрд╝ рдХрд░реЗрдВ
      if (axios.isAxiosError(error) && (error.response?.status === 401 || error.response?.status === 403)) {
        firebaseSignOut();
        queryClient.invalidateQueries({ queryKey: ["/api/auth/user"] }); // рдХреНрд╡реЗрд░реА рдХреЛ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ
      }
    }
  });

  // рдХреБрд▓ рд▓реЛрдбрд┐рдВрдЧ рд╕реНрдерд┐рддрд┐
  const isLoading = isFirebaseLoading || isBackendLoading;

  // FirebaseUser рдФрд░ backendUser рдбреЗрдЯрд╛ рдХреЛ рд╕рдВрдпреЛрдЬрд┐рдд рдХрд░реЗрдВ
  const combinedUser: User | null = firebaseUser && backendUser ? {
    uid: firebaseUser.uid,
    email: firebaseUser.email,
    firstName: firebaseUser.displayName?.split(" ")[0] || backendUser.firstName || "",
    lastName: firebaseUser.displayName?.split(" ")[1] || backendUser.lastName || "",
    role: backendUser.role, // рдмреИрдХрдПрдВрдб рд╕реЗ рднреВрдорд┐рдХрд╛ рд▓реЗрдВ
    // рдЕрдиреНрдп рдлрд╝реАрд▓реНрдб рдпрджрд┐ рдЖрд╡рд╢реНрдпрдХ рд╣реЛ рддреЛ рдЬреЛрдбрд╝реЗрдВ
  } : null;

  return {
    user: combinedUser,
    isLoading,
    isAuthenticated: !!combinedUser && !isLoading, // рдХреЗрд╡рд▓ рддрднреА рдкреНрд░рдорд╛рдгрд┐рдд рдЬрдм рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рд╣реЛ рдФрд░ рд▓реЛрдбрд┐рдВрдЧ рд╕рдорд╛рдкреНрдд рд╣реЛ
  };
};
