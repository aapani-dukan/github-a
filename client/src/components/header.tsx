// Header.tsx
import React from "react";
import { useCartStore } from "@/lib/store";
import CartModal from "./cart-modal";
import { Link, useLocation } from "wouter";
import { initiateGoogleSignInRedirect } from "@/lib/firebase"; 
import { useAuth } from "@/hooks/useAuth"; 

interface Category {
  id: string;
  name: string;
}

interface HeaderProps {
  categories: Category[];
}

const Header: React.FC<HeaderProps> = ({ categories }) => {
  const { items, isCartOpen, toggleCart } = useCartStore();
  const [, navigate] = useLocation();
  const { user, isAuthenticated, isLoadingAuth } = useAuth(); 

  // 'Become a Seller' ‡§¨‡§ü‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
  const handleBecomeSeller = async () => {
    // 1. ‡§™‡§π‡§≤‡•á ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§ï‡§ø ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§Ö‡§≠‡•Ä ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
    if (isLoadingAuth) {
      console.log("Header: Auth state still loading, please wait for 'Become a Seller' click.");
      // ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§ï‡•ã‡§à UI ‡§´‡•Ä‡§°‡§¨‡•à‡§ï ‡§¶‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó ‡§∏‡•ç‡§™‡§ø‡§®‡§∞ ‡§Ø‡§æ ‡§¨‡§ü‡§® ‡§ï‡•ã ‡§°‡§ø‡§∏‡•á‡§¨‡§≤ ‡§∞‡§ñ‡§®‡§æ (‡§ú‡•ã ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•à)
      return; 
    }

    // 2. ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à (isAuthenticated false ‡§π‡•à)
    if (!isAuthenticated) {
      console.log("Header: User is not logged in. Initiating Google Sign-In Redirect with intent.");
      try {
        // Google Sign-in Redirect ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç, ‡§î‡§∞ URL ‡§Æ‡•á‡§Ç intent ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
        // ‡§§‡§æ‡§ï‡§ø ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•á ‡§¨‡§æ‡§¶ AuthRedirectGuard ‡§á‡§∏‡•á ‡§™‡§¢‡§º ‡§∏‡§ï‡•á‡•§
        await initiateGoogleSignInRedirect("become-seller"); 
        // initiateGoogleSignInRedirect ‡§ï‡•ã intent ‡§™‡•à‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞ ‡§≤‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ
        // ‡§á‡§∏ ‡§¨‡§ø‡§Ç‡§¶‡•Å ‡§™‡§∞, ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ Google ‡§ï‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§
        // ‡§ú‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§Ü‡§è‡§ó‡§æ, ‡§§‡•ã onAuthStateChanged (useAuth ‡§Æ‡•á‡§Ç) ‡§î‡§∞ AuthRedirectGuard ‡§â‡§∏‡•á ‡§∏‡§π‡•Ä ‡§ú‡§ó‡§π ‡§≠‡•á‡§ú‡•á‡§Ç‡§ó‡•á‡•§
      } catch (error) {
        console.error("Header: Error during Google Sign-In Redirect:", error);
        // ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó, ‡§ú‡•à‡§∏‡•á ‡§ü‡•ã‡§∏‡•ç‡§ü ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ
      }
    } else {
      // 3. ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§≤‡•â‡§ó ‡§á‡§® ‡§π‡•à (isAuthenticated true ‡§π‡•à)
      console.log("Header: User is already logged in. Determining seller path based on role and status.");
      let sellerTargetPath: string;

      // ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∏‡•á‡§≤‡§∞ ‡§™‡§æ‡§• ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
      if (user?.role === "seller") { // 'user?' ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø user null ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
        const approvalStatus = user.seller?.approvalStatus; // 'user.seller?' ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        if (approvalStatus === "approved") {
          sellerTargetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          sellerTargetPath = "/seller-status";
        } else { // 'rejected' ‡§Ø‡§æ 'customer' ‡§ú‡§ø‡§∏‡§®‡•á ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§Ö‡§™‡•ç‡§≤‡§æ‡§à ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ
          sellerTargetPath = "/seller-apply";
        }
      } else {
        // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ 'customer' ‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§Ö‡§®‡•ç‡§Ø ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§Ö‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡•á‡§ú‡•á‡§Ç
        sellerTargetPath = "/seller-apply";
      }

      console.log(`Header: Redirecting logged-in user to: ${sellerTargetPath}`);
      // ‡§≤‡•â‡§ó-‡§á‡§® ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§∏‡•Ä‡§ß‡•á ‡§â‡§∏‡§ï‡•á ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§™‡•á‡§ú ‡§™‡§∞ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§
      // ‡§π‡§Æ‡•á‡§Ç ‡§Ø‡§π‡§æ‡§Ç URL ‡§Æ‡•á‡§Ç 'intent' ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø AuthRedirectGuard
      // ‡§Ö‡§¨ ‡§≤‡•â‡§ó-‡§á‡§® ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞ ‡§ö‡•Å‡§ï‡§æ ‡§π‡•à (‡§Ö‡§ó‡§∞ ‡§µ‡§π /auth ‡§∏‡•á ‡§Ü‡§Ø‡§æ ‡§π‡•à)‡•§
      // ‡§Ø‡§π‡§æ‡§Ç ‡§π‡§Æ ‡§∏‡•Ä‡§ß‡•á ‡§∏‡§π‡•Ä ‡§ú‡§ó‡§π ‡§≠‡•á‡§ú ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§
      navigate(sellerTargetPath); 
    }
  };

  return (
    <header className="bg-white shadow-md px-4 py-3 flex items-center justify-between">
      <Link href="/" className="text-xl font-bold text-blue-600">
        Shopnish
      </Link>

      <nav className="space-x-4">
        {categories.map((category) => (
          <Link
            key={category.id}
            href={`/category/${category.id}`}
            className="text-gray-700 hover:text-blue-600"
          >
            {category.name}
          </Link>
        ))}
      </nav>

      <div className="flex items-center space-x-4">
        <button
          onClick={toggleCart}
          className="relative text-gray-700 hover:text-blue-600"
        >
          üõí
          {items.length > 0 && (
            <span className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center">
              {items.length}
            </span>
          )}
        </button>

        {/* Updated: Become a Seller Button */}
        <button
          onClick={handleBecomeSeller}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          // isLoadingAuth ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§¨‡§ü‡§® ‡§ï‡•ã ‡§°‡§ø‡§∏‡•á‡§¨‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡•á ‡§ú‡§¨ ‡§§‡§ï ‡§ë‡§• ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§® ‡§π‡•ã
          disabled={isLoadingAuth} 
        >
          {isLoadingAuth ? "Loading Auth..." : "Become a Seller"}
        </button>
      </div>

      <CartModal isOpen={isCartOpen} onClose={toggleCart} />
    </header>
  );
};

export default Header;
