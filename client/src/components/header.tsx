// Header.tsx
import React from "react";
import { useCartStore } from "@/lib/store";
import CartModal from "./cart-modal";
import { Link, useLocation } from "wouter";
import { initiateGoogleSignInRedirect } from "@/lib/firebase"; // ‚úÖ Import initiateGoogleSignInRedirect
import { useAuth } from "@/hooks/useAuth"; // ‚úÖ Import useAuth to check if user is logged in

interface Category {
  id: string;
  name: string;
}

interface HeaderProps {
  categories: Category[];
}

const Header: React.FC<HeaderProps> = ({ categories }) => {
  const { items, isCartOpen, toggleCart } = useCartStore();
  const [, navigate] = useLocation();
  const { user } = useAuth(); // ‚úÖ Get user from useAuth hook

  // üì¶ 'Become a Seller' ‡§¨‡§ü‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
  const handleBecomeSeller = async () => {
    if (user) {
      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§≤‡•â‡§ó ‡§á‡§® ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§∏‡•Ä‡§ß‡•á ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ë‡§®‡§¨‡•ã‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§™‡•á‡§ú ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç
      // ‡§Ø‡§æ, ‡§Ø‡§¶‡§ø ‡§µ‡§π ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡§ï‡•á ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§
      // ‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡•Ä ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ë‡§®‡§¨‡•ã‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§≤‡•â‡§ú‡§ø‡§ï ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§™‡§æ‡§• ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§
      // ‡§Æ‡§æ‡§® ‡§≤‡•Ä‡§ú‡§ø‡§è ‡§ï‡§ø /seller-apply ‡§Ü‡§™‡§ï‡§æ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•á‡§ú ‡§π‡•à‡•§
      console.log("User is already logged in, navigating to seller application.");
      navigate("/seller-apply"); // ‡§Ø‡§æ /seller-dashboard ‡§Ø‡§¶‡§ø ‡§µ‡§π ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§π‡•à
    } else {
      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§≤‡•â‡§ó ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã Google ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§∏‡§æ‡§á‡§®-‡§á‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
      console.log("User is not logged in, initiating Google Sign-In Redirect for seller.");
      try {
        await initiateGoogleSignInRedirect();
        // signInWithRedirect ‡§ï‡•á ‡§¨‡§æ‡§¶, ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§π‡•ã‡§ó‡§æ‡•§
        // AuthRedirectGuard ‡§î‡§∞ useAuth.tsx ‡§ï‡§æ onAuthStateChanged ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§¨‡§æ‡§ï‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
      } catch (error) {
        console.error("Error during Google Sign-In Redirect:", error);
        // ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
      }
    }
  };

  return (
    <header className="bg-white shadow-md px-4 py-3 flex items-center justify-between">
      <Link href="/" className="text-xl font-bold text-blue-600">
        Shopnish
      </Link>

      <nav className="space-x-4">
        {categories.map((category) => (
          <Link
            key={category.id}
            href={`/category/${category.id}`}
            className="text-gray-700 hover:text-blue-600"
          >
            {category.name}
          </Link>
        ))}
      </nav>

      <div className="flex items-center space-x-4">
        <button
          onClick={toggleCart}
          className="relative text-gray-700 hover:text-blue-600"
        >
          üõí
          {items.length > 0 && (
            <span className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center">
              {items.length}
            </span>
          )}
        </button>

        {/* ‚úÖ 'Become a Seller' ‡§¨‡§ü‡§® ‡§Ö‡§¨ handleBecomeSeller ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§ó‡§æ */}
        <button
          onClick={handleBecomeSeller} // ‚úÖ Updated to call the new handler
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          Become a Seller
        </button>
      </div>

      <CartModal isOpen={isCartOpen} onClose={toggleCart} />
    </header>
  );
};

export default Header;
