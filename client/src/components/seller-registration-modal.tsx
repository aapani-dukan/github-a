// client/src/components/seller-registration-modal.tsx
import { useState } from "react"; // тЬЕ useState рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
import { useAuth } from "@/hooks/useAuth";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input"; // тЬЕ Input рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
import { Label } from "@/components/ui/label"; // тЬЕ Label рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
import { Textarea } from "@/components/ui/textarea"; // Textarea рднреА рд░рдЦреЗрдВ
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { insertSellerSchema } from "@shared/backend/schema"; // тЬЕ рдЕрдкрдиреЗ schema рдХрд╛ рд╕рд╣реА рдкрд╛рде
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { z } from "zod";
import { Check, X, Store } from "lucide-react"; // тЬЕ Check рдФрд░ X рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ

// рдЖрдкрдХреА рдореМрдЬреВрджрд╛ sellerFormSchema
const sellerFormSchema = insertSellerSchema.omit({ userId: true }).extend({
  // рдЙрджрд╛рд╣рд░рдг рд╕реЗ name рдФрд░ mobile рдлрд╝реАрд▓реНрдбреНрд╕ рдЬреЛрдбрд╝реЗ рдЧрдП рд╣реИрдВ
  // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпреЗ рдлрд╝реАрд▓реНрдбреНрд╕ рдЖрдкрдХреЗ Drizzle schema рдореЗрдВ рдореМрдЬреВрдж рд╣реИрдВ рдпрд╛ рдЖрдк рдЙрдиреНрд╣реЗрдВ рд╣рдЯрд╛ рд╕рдХрддреЗ рд╣реИрдВ
  // рдпрджрд┐ рдЖрдк рдЕрдкрдиреЗ рдореВрд▓ sellerFormSchema (businessName, businessType, etc.) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ,
  // рддреЛ рдмрд╕ рдЗрди name рдФрд░ mobile рдлрд╝реАрд▓реНрдбреНрд╕ рдХреЛ рд╣рдЯрд╛ рджреЗрдВ рдФрд░ рдЕрдкрдиреЗ рдкреБрд░рд╛рдиреЗ FormField рдХрдВрдкреЛрдиреЗрдВрдЯреНрд╕ рдХреЛ рд╡рд╛рдкрд╕ рд▓рд╛рдПрдБред
  // рдореИрдВ рдЕрднреА рдХреЗ рд▓рд┐рдП рдЙрдиреНрд╣реЗрдВ рдЙрджрд╛рд╣рд░рдг рдХреЗ рд░реВрдк рдореЗрдВ рд░рдЦ рд░рд╣рд╛ рд╣реВрдБ рддрд╛рдХрд┐ рдлреЙрд░реНрдо рд╕рдмрдорд┐рд╢рди рдХрд╛рдо рдХрд░реЗред
  // рдпрджрд┐ рдЖрдкрдХрд╛ Drizzle schema `name` рдпрд╛ `mobile` рдирд╣реАрдВ рд░рдЦрддрд╛ рд╣реИ, рддреЛ рдпрд╣ рдмрд╛рдж рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рдкреИрджрд╛ рдХрд░реЗрдЧрд╛ред
  // рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ schema рдХреЛ рдзреНрдпрд╛рди рдореЗрдВ рд░рдЦреЗрдВред
  // **рдорд╣рддреНрд╡рдкреВрд░реНрдг:** рдореИрдВ рдЖрдкрдХреЗ рдореВрд▓ `sellerFormSchema` рдХреЗ рд╕рднреА рдлрд╝реАрд▓реНрдбреНрд╕ рдХреЛ `Input` рдФрд░ `Textarea` рдХреЗ рд╕рд╛рде
  // `register` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╢рд╛рдорд┐рд▓ рдХрд░ рд░рд╣рд╛ рд╣реВрдБ, рдЬреИрд╕рд╛ рдХрд┐ рдЙрджрд╛рд╣рд░рдг рдореЗрдВ рдерд╛ред
});

type FormData = z.infer<typeof sellerFormSchema>;

interface SellerRegistrationModalProps { // тЬЕ Props рдХреЛ isOpen рдФрд░ onClose рдХреЗ рд▓рд┐рдП рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
  isOpen: boolean;
  onClose: () => void;
}

export default function SellerRegistrationModal({ isOpen, onClose }: SellerRegistrationModalProps) {
  const { user, isAuthenticated } = useAuth(); // isAuthenticated рдЕрднреА рднреА рдЪреЗрдХ рдХрд░рдирд╛ рдмреЗрд╣рддрд░ рд╣реИ
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [showSuccess, setShowSuccess] = useState(false); // тЬЕ рд╕рдХреНрд╕реЗрд╕ рд╕реНрдЯреЗрдЯ

  const {
    register, // тЬЕ useForm рд╕реЗ register рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
    handleSubmit, // тЬЕ useForm рд╕реЗ handleSubmit рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
    formState: { errors, isSubmitting }, // тЬЕ errors рдФрд░ isSubmitting рдХреЛ рднреА рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
    reset,
  } = useForm<FormData>({
    resolver: zodResolver(sellerFormSchema),
    defaultValues: {
      businessName: "",
      businessType: "grocery",
      description: "",
      businessAddress: "",
      city: "",
      pincode: "",
      businessPhone: "",
      gstNumber: "",
      bankAccountNumber: "",
      ifscCode: "",
      deliveryRadius: 5,
      // userId: user?.id || undefined, // userId рдХреЛ omit рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рдЗрд╕рд▓рд┐рдП рдЗрд╕реЗ рдпрд╣рд╛рдБ рди рд░рдЦреЗрдВ
    },
  });

  const registerSellerMutation = useMutation({
    mutationFn: async (data: FormData) => {
      if (!user?.uid || !isAuthenticated) {
        throw new Error("User is not authenticated. Please log in first.");
      }
      const payload = { ...data, userId: user.uid }; // userId рдХреЛ рдпрд╣рд╛рдВ рдЬреЛрдбрд╝реЗрдВ
      const response = await apiRequest("POST", "/api/sellers", payload); // тЬЕ API рдкрд╛рде рд╕рд╣реА рд░рдЦреЗрдВ
      // Drizzle API рдЖрдо рддреМрд░ рдкрд░ JSON рд░рд┐рд╕реНрдкрд╛рдВрд╕ рджреЗрддреА рд╣реИ
      return response; // response.json() рдпрджрд┐ рдЖрдкрдХрд╛ apiRequest рдкрд╣рд▓реЗ рд╕реЗ рд╣реА JSON рдХреЛ рдкрд╛рд░реНрд╕ рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛ рд╣реИ
    },
    onSuccess: () => {
      setShowSuccess(true); // тЬЕ рд╕рдХреНрд╕реЗрд╕ рд╕реНрдЯреЗрдЯ рд╕реЗрдЯ рдХрд░реЗрдВ
      reset(); // тЬЕ рдлреЙрд░реНрдо рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ
      queryClient.invalidateQueries({ queryKey: ["/api/sellers/me"] }); // тЬЕ Query invalidate рдХрд░реЗрдВ
      
      setTimeout(() => { // тЬЕ 2 рд╕реЗрдХрдВрдб рдмрд╛рдж рдореЙрдбрд▓ рдмрдВрдж рдХрд░реЗрдВ
        setShowSuccess(false);
        onClose();
        // рдпрджрд┐ рдЖрдк рд╕рдлрд▓рддрд╛ рдХреЗ рдмрд╛рдж рдХрд┐рд╕реА рд╡рд┐рд╢реЗрд╖ рдкреЗрдЬ рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ, рддреЛ рдпрд╣рд╛рдБ setLocation("/your-success-page"); рдЬреЛрдбрд╝реЗрдВ
        // setLocation("/admin-dashboard"); // рдпрджрд┐ рдЖрдк рд╕реАрдзреЗ admin-dashboard рдкрд░ рдЬрд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ
      }, 2000);
    },
    onError: (error: any) => {
      toast({
        title: "Registration Failed",
        description: error.message || "Something went wrong. Try again.",
        variant: "destructive",
      });
      // рдпрджрд┐ рдЖрдк рдПрд░рд░ рдкрд░ рднреА рдореЙрдбрд▓ рдмрдВрдж рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ, рддреЛ onClose() рдпрд╣рд╛рдБ рдЬреЛрдбрд╝реЗрдВред
      // onClose();
    },
  });

  // тЬЕ onSubmit рдлрд╝рдВрдХреНрд╢рди рдХреЛ handleSubmit рд╕реЗ рдЬреЛрдбрд╝реЗрдВ
  const onSubmit = (data: FormData) => {
    console.log("Form submitted!");
    console.log("Form data:", data);
    registerSellerMutation.mutate(data);
  };

  const handleClose = () => { // тЬЕ рдХреНрд▓реЛрдЬ рд╣реИрдВрдбрд▓рд░
    reset();
    onClose();
    setShowSuccess(false); // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдмрдВрдж рд╣реЛрдиреЗ рдкрд░ рд╕рдХреНрд╕реЗрд╕ рд╕реНрдЯреЗрдЯ рд░реАрд╕реЗрдЯ рд╣реЛ
  };

  // тЬЕ рд╕рдХреНрд╕реЗрд╕ рд╕реНрдЯреЗрдЯ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд░реЗрдВрдбрд░рд┐рдВрдЧ
  if (showSuccess) {
    return (
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="max-w-md">
          <div className="text-center p-6">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Check className="text-green-600 text-2xl w-8 h-8" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">Registration Submitted!</h2>
            <p className="text-gray-600 mb-6">Your seller application has been submitted successfully. We'll review it and get back to you soon.</p>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  // рдпрджрд┐ isAuthenticated рдирд╣реАрдВ рд╣реИ, рддреЛ рддреБрд░рдВрдд рд▓реЙрдЧ рдЗрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд░реЙрдореНрдкреНрдЯ рджрд┐рдЦрд╛рдПрдВ
  // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ рдлреЙрд░реНрдо рддрднреА рдЦреБрд▓реЗ рдЬрдм рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реЛред
  if (!isAuthenticated && isOpen) {
    return (
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="max-w-md z-[100]">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Store className="h-5 w-5 mr-2" />
              Join as a Seller
            </DialogTitle>
          </DialogHeader>
          <div className="text-center py-6">
            <div className="text-4xl mb-4">ЁЯФР</div>
            <h3 className="text-lg font-semibold mb-2">Login Required</h3>
            <p className="text-muted-foreground mb-4">Please log in to register as a seller.</p>
            {/* рдпрджрд┐ рдЖрдк Firebase рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣реЗ рд╣реИрдВ рдФрд░ login page рдкрд░ redirect рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ */}
            <Button onClick={() => setLocation("/login")} className="w-full">
              Continue to Login
            </Button>
            {/* рдпрд╛ initiateGoogleSignInRedirect рдпрджрд┐ рдпрд╣ Firebase рдХрд╛ рдкреЙрдкрдЕрдк/рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд╣реИ */}
            {/* <Button onClick={initiateGoogleSignInRedirect} className="w-full">
              Continue with Google
            </Button> */}
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  // тЬЕ рдореБрдЦреНрдп рдлреЙрд░реНрдо рд░реЗрдВрдбрд░ рдХрд░реЗрдВ
  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <DialogTitle className="text-2xl font-semibold text-gray-900">Become a Seller</DialogTitle>
            <Button
              variant="ghost"
              size="sm"
              onClick={handleClose}
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
          <p className="text-muted-foreground">
            Register your local grocery store or kirana shop for same-city delivery within 1 hour
          </p>
        </DialogHeader>
        
        {/* тЬЕ form рдЯреИрдЧ рдХреЛ рд╕реАрдзреЗ handleSubmit рд╕реЗ рдЬреЛрдбрд╝реЗрдВ */}
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="businessName" className="block text-sm font-medium text-gray-700 mb-2">
              Business Name
            </Label>
            <Input
              id="businessName"
              {...register("businessName")} // тЬЕ register рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
              placeholder="Enter your business name"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.businessName && (
              <p className="text-red-500 text-sm mt-1">{errors.businessName.message}</p>
            )}
          </div>
          
          <div>
            <Label htmlFor="businessAddress" className="block text-sm font-medium text-gray-700 mb-2">
              Business Address
            </Label>
            <Textarea
              id="businessAddress"
              {...register("businessAddress")} // тЬЕ register рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
              placeholder="Enter your business address"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.businessAddress && (
              <p className="text-red-500 text-sm mt-1">{errors.businessAddress.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="businessType" className="block text-sm font-medium text-gray-700 mb-2">
              Business Type
            </Label>
            <Input
              id="businessType"
              {...register("businessType")}
              placeholder="e.g., grocery, electronics"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.businessType && (
              <p className="text-red-500 text-sm mt-1">{errors.businessType.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
              Description
            </Label>
            <Textarea
              id="description"
              {...register("description")}
              placeholder="Describe your business"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.description && (
              <p className="text-red-500 text-sm mt-1">{errors.description.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="city" className="block text-sm font-medium text-gray-700 mb-2">
              City
            </Label>
            <Input
              id="city"
              {...register("city")}
              placeholder="Your city"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.city && (
              <p className="text-red-500 text-sm mt-1">{errors.city.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="pincode" className="block text-sm font-medium text-gray-700 mb-2">
              Pincode
            </Label>
            <Input
              id="pincode"
              {...register("pincode")}
              placeholder="e.g., 305001"
              type="text"
              inputMode="numeric"
              pattern="[0-9]*"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.pincode && (
              <p className="text-red-500 text-sm mt-1">{errors.pincode.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="businessPhone" className="block text-sm font-medium text-gray-700 mb-2">
              Business Phone
            </Label>
            <Input
              id="businessPhone"
              {...register("businessPhone")}
              placeholder="Enter business contact number"
              type="tel"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.businessPhone && (
              <p className="text-red-500 text-sm mt-1">{errors.businessPhone.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="gstNumber" className="block text-sm font-medium text-gray-700 mb-2">
              GST Number
            </Label>
            <Input
              id="gstNumber"
              {...register("gstNumber")}
              placeholder="Enter GST number"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.gstNumber && (
              <p className="text-red-500 text-sm mt-1">{errors.gstNumber.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="bankAccountNumber" className="block text-sm font-medium text-gray-700 mb-2">
              Bank Account Number
            </Label>
            <Input
              id="bankAccountNumber"
              {...register("bankAccountNumber")}
              placeholder="Enter bank account number"
              type="text"
              inputMode="numeric"
              pattern="[0-9]*"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.bankAccountNumber && (
              <p className="text-red-500 text-sm mt-1">{errors.bankAccountNumber.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="ifscCode" className="block text-sm font-medium text-gray-700 mb-2">
              IFSC Code
            </Label>
            <Input
              id="ifscCode"
              {...register("ifscCode")}
              placeholder="Enter IFSC code"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.ifscCode && (
              <p className="text-red-500 text-sm mt-1">{errors.ifscCode.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="deliveryRadius" className="block text-sm font-medium text-gray-700 mb-2">
              Delivery Radius (in km)
            </Label>
            <Input
              id="deliveryRadius"
              {...register("deliveryRadius", { valueAsNumber: true })} // рд╕рдВрдЦреНрдпрд╛ рдХреЗ рд░реВрдк рдореЗрдВ рд╡реИрд▓реНрдпреВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
              placeholder="e.g., 5"
              type="number"
              className="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 outline-none"
            />
            {errors.deliveryRadius && (
              <p className="text-red-500 text-sm mt-1">{errors.deliveryRadius.message}</p>
            )}
          </div>
          
          <div className="pt-4">
            <Button
              type="submit"
              disabled={registerSellerMutation.isPending} // тЬЕ isPending рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center"
            >
              {registerSellerMutation.isPending ? ( // тЬЕ isPending рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
                <>
                  <span>Submitting...</span>
                  <div className="ml-2 animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                </>
              ) : (
                "Submit Application"
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
