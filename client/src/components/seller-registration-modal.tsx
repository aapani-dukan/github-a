import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { insertSellerSchema } from "@shared/backend/schema";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useSellerRegistrationStore } from "@/lib/store";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";
import { Store } from "lucide-react";
import { z } from "zod";
import { initiateGoogleSignInRedirect } from "@/lib/firebase";
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const sellerFormSchema = insertSellerSchema.omit({ userId: true });

// interface SellerRegistrationModalProps {
//   isPageMode?: boolean; // ‚úÖ ‡§Ø‡§π ‡§™‡•ç‡§∞‡•â‡§™ ‡§Ö‡§¨ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
// }

// export default function SellerRegistrationModal({ isPageMode = false }: SellerRegistrationModalProps) {
export default function SellerRegistrationModal() { // ‚úÖ ‡§™‡•ç‡§∞‡•â‡§™‡•ç‡§∏ ‡§π‡§ü‡§æ‡§è ‡§ó‡§è
  const { isOpen, close } = useSellerRegistrationStore();
  const { user, isAuthenticated } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [, setLocation] = useLocation();

  // ‡§Ö‡§¨ dialogOpen ‡§π‡§Æ‡•á‡§∂‡§æ store ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§π‡•ã‡§ó‡§æ
  const dialogOpen = isOpen; // ‚úÖdialogOpen ‡§π‡§Æ‡•á‡§∂‡§æ store.isOpen ‡§ï‡•á ‡§¨‡§∞‡§æ‡§¨‡§∞ ‡§π‡•ã‡§ó‡§æ

  const form = useForm<z.infer<typeof sellerFormSchema>>({
    resolver: zodResolver(sellerFormSchema),
    defaultValues: {
      businessName: "",
      businessType: "grocery",
      description: "",
      businessAddress: "",
      city: "",
      pincode: "",
      businessPhone: "",
      gstNumber: "",
      bankAccountNumber: "",
      ifscCode: "",
      deliveryRadius: 5,
    },
  });

  const registerSellerMutation = useMutation({
    mutationFn: async (data: z.infer<typeof sellerFormSchema>) => {
      if (!user?.uid) throw new Error("User not authenticated");
      const payload = { ...data, userId: user.uid };
      return await apiRequest("POST", "/api/sellers", payload);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/sellers/me"] });
      toast({
        title: "Registration Successful!",
        description: "Your seller account has been created. Admin verification is pending.", // ‚úÖ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ï‡§ø ‡§è‡§°‡§Æ‡§ø‡§® ‡§µ‡•á‡§∞‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§™‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó ‡§π‡•à
      });
      form.reset();
      // ‚úÖ ‡§∏‡§´‡§≤‡§§‡§æ ‡§™‡§∞ admin-dashboard ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ seller-status ‡§™‡§∞
      // ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§è‡§°‡§Æ‡§ø‡§® ‡§¶‡•á‡§ñ‡•á, ‡§§‡•ã ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§¨‡•à‡§ï‡§è‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡•Ä‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
      // ‡§Ø‡§¶‡§ø ‡§Ü‡§™ UI ‡§ï‡•ã ‡§è‡§°‡§Æ‡§ø‡§® ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§Ø‡§π ‡§Ø‡§π‡§æ‡§Å ‡§π‡•ã‡§ó‡§æ:
      setLocation("/admin-dashboard"); // ‚úÖ admin-dashboard ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
      close(); // ‡§Æ‡•â‡§°‡§≤ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
    },
    onError: (error: any) => {
      toast({
        title: "Registration Failed",
        description: error.message || "Something went wrong. Try again.",
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: z.infer<typeof sellerFormSchema>) => {
    registerSellerMutation.mutate(data);
  };

  // ‚úÖ ‡§Ø‡§¶‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
  if (!isAuthenticated) { // ‚úÖ isPageMode ‡§≤‡•â‡§ú‡§ø‡§ï ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ
    return (
      <Dialog open={dialogOpen} onOpenChange={close}>
        <DialogContent className="max-w-md z-[100]">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Store className="h-5 w-5 mr-2" />
              Join as a Seller
            </DialogTitle>
          </DialogHeader>
          <div className="text-center py-6">
            <div className="text-4xl mb-4">üîê</div>
            <h3 className="text-lg font-semibold mb-2">Login Required</h3>
            <p className="text-muted-foreground mb-4">Please log in to register as a seller.</p>
            <Button onClick={initiateGoogleSignInRedirect} className="w-full">
              Continue with Google
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  // ‚úÖ ‡§Ø‡§¶‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§ ‡§π‡•à, ‡§§‡•ã ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§´‡•â‡§∞‡•ç‡§Æ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
  return (
    <Dialog open={dialogOpen} onOpenChange={close}> {/* ‚úÖ onOpenChange ‡§ï‡•ã ‡§ï‡•á‡§µ‡§≤ close ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ */}
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center text-2xl">
            <Store className="h-6 w-6 mr-2" />
            Become a Seller
          </DialogTitle>
          <p className="text-muted-foreground">
            Register your local grocery store or kirana shop for same-city delivery within 1 hour
          </p>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField name="businessName" control={form.control} render={({ field }) => (
              <FormItem>
                <FormLabel>Business Name</FormLabel>
                <FormControl><Input {...field} /></FormControl>
                <FormMessage />
              </FormItem>
            )} />
            <FormField name="businessAddress" control={form.control} render={({ field }) => (
              <FormItem>
                <FormLabel>Business Address</FormLabel>
                <FormControl><Textarea {...field} /></FormControl>
                <FormMessage />
              </FormItem>
            )} />
            {/* ‚úÖ ‡§Ö‡§®‡•ç‡§Ø ‡§´‡•â‡§∞‡•ç‡§Æ ‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ (businessType, description, city, pincode, etc.) ‡§Ø‡§π‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡•á‡§Ç */}
            {/* ‡§Æ‡•à‡§Ç‡§®‡•á ‡§ï‡•á‡§µ‡§≤ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è businessName ‡§î‡§∞ businessAddress ‡§∞‡§ñ‡•á ‡§π‡•à‡§Ç‡•§ */}
            {/* ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ ‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à‡§Ç‡•§ */}

            <DialogFooter>
              <Button type="button" variant="outline" onClick={close}>Cancel</Button> {/* ‚úÖ onOpenChange ‡§ï‡•ã ‡§ï‡•á‡§µ‡§≤ close ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ */}
              <Button type="submit" disabled={registerSellerMutation.isPending}>
                {registerSellerMutation.isPending ? "Registering..." : "Register as Seller"}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
