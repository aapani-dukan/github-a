// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

// SSR-compatible intent extractor
function getIntentFromLocation(location: string): string | null {
  try {
    const url = new URL(location, "http://localhost"); // dummy base for parsing
    return url.searchParams.get("intent");
  } catch {
    return null;
  }
}

export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const intent = getIntentFromLocation(location);
  const { user, isLoadingAuth, isAuthenticated } = useAuth(); // isAuthenticated рднреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ

  useEffect(() => {
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("isAuthenticated:", isAuthenticated); // рдирдпрд╛ рд▓реЙрдЧ
    console.log("Current user:", user);
    console.log("Current location:", location);

    // тЬЕ Step 1: рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд▓реЛрдб рд╣реЛрдиреЗ рддрдХ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ
    if (isLoadingAuth) {
      console.log("AuthRedirectGuard: Still loading auth, returning.");
      return;
    }

    // тЬЕ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрдереЛрдВ рдХреА рд╕реВрдЪреА, рдЬрд┐рд╕рдореЗрдВ Firebase auth handler рднреА рд╢рд╛рдорд┐рд▓ рд╣реИ
    const publicPaths = [
      "/",
      "/product",
      "/cart",
      "/checkout",
      "/auth", // Auth page is public for login
      "/login", // If you have a separate login page
      "/admin-login", // If you have an admin login page
      // Firebase auth handler path (important for redirect login flow)
      "__/auth/handler", // Firebase redirect handler
    ];

    const isPublicPath = publicPaths.some((path) => location.includes(path)); // `.includes` for handler subpath

    // ЁЯФТ рд╕реНрдЯреЗрдк 2: рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реИ
    if (!isAuthenticated) {
      console.log("AuthRedirectGuard: User not logged in, checking redirect.");
      // рдпрджрд┐ рд╡рд░реНрддрдорд╛рди рдкрде рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдирд╣реАрдВ рд╣реИ рдФрд░ Firebase auth handler рдирд╣реАрдВ рд╣реИ, рддреЛ /auth рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
      if (!isPublicPath && !location.includes("__/auth/handler")) {
        console.log("AuthRedirectGuard: Not on public/auth/handler path, redirecting to /auth.");
        navigate("/auth");
      }
      // рдпрджрд┐ рдпрд╣ /auth рдкрд░ рд╣реИ рдпрд╛ public/handler рдкрд░ рд╣реИ, рддреЛ рдЙрд╕реЗ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
      return;
    }

    // ЁЯФУ рд╕реНрдЯреЗрдк 3: рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рд╣реИ (`isAuthenticated` рдЕрдм true рд╣реИ)
    console.log(
      "AuthRedirectGuard: User is logged in. Current role:",
      user?.role
    );

    // рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди рдкреЗрдЬ рдкрд░ рд╣реИ рд▓реЗрдХрд┐рди рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд▓реЙрдЧ рдЗрди рд╣реИ, рддреЛ рдЙрд╕реЗ рдЙрд╕рдХреЗ рд░реЛрд▓ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
    if (
      location.startsWith("/auth") ||
      location.startsWith("/login") ||
      location.startsWith("/admin-login")
    ) {
      console.log(
        "AuthRedirectGuard: User is logged in and on a login/auth page, redirecting based on role."
      );
      // рдЕрдм рднреВрдорд┐рдХрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдиреЗрд╡рд┐рдЧреЗрдЯ рдХрд░реЗрдВ
      if (user?.role === "seller") {
        const approvalStatus = user.seller?.approvalStatus;
        if (approvalStatus === "approved") {
          navigate("/seller-dashboard");
        } else if (approvalStatus === "pending") {
          navigate("/seller-status");
        } else {
          navigate("/seller-apply"); // рдпрджрд┐ рдЕрднреА рддрдХ рдЖрд╡реЗрджрди рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ
        }
      } else if (user?.role === "admin") {
        navigate("/admin-dashboard");
      } else if (user?.role === "delivery") {
        navigate("/delivery-dashboard");
      } else {
        navigate("/"); // рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдЧреНрд░рд╛рд╣рдХ рд╣реЛрдо рдкрд░
      }
      return; // рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХреЗ рдмрд╛рдж рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ
    }

    // рд╕реНрдЯреЗрдк 4: рд░реЛрд▓-рдЖрдзрд╛рд░рд┐рдд рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ (рд▓реЙрдЧрд┐рди рдкреЗрдЬ рдкрд░ рдирд╣реАрдВ рд╣реЛрдиреЗ рдкрд░)
    if (!user?.role) {
      console.log(
        "AuthRedirectGuard: User logged in, but role is missing. Defaulting to customer dashboard."
      );
      if (!location.startsWith("/")) navigate("/"); // рдпрджрд┐ рд╣реЛрдо рдкрд░ рдирд╣реАрдВ рд╣реИ рддреЛ рд╣реЛрдо рдкрд░ рднреЗрдЬреЗрдВ
      return;
    }

    console.log(
      "AuthRedirectGuard: User logged in, checking role-based redirect for role:",
      user.role
    );

    switch (user.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus;
        let targetPath = "/seller-apply"; // default for new sellers

        if (approvalStatus === "approved") {
          targetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          targetPath = "/seller-status";
        }

        // рдпрджрд┐ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд▓рдХреНрд╖реНрдп рдкрде рд╣реИ, рддреЛ рдХреБрдЫ рди рдХрд░реЗрдВ
        if (location.startsWith(targetPath)) {
          console.log("AuthRedirectGuard: Seller already on target path. No redirect.");
          return;
        }

        // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ /seller-apply рдкрд░ рд╣реИ рдФрд░ рдЙрд╕рдХрд╛ рдЖрд╡реЗрджрди рдЕрдиреБрдореЛрджрд┐рдд/рд▓рдВрдмрд┐рдд рд╣реИ, рддреЛ рдЙрд╕реЗ рдЙрдкрдпреБрдХреНрдд рдкреЗрдЬ рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (location.startsWith("/seller-apply") && (approvalStatus === "approved" || approvalStatus === "pending")) {
          console.log(`AuthRedirectGuard: Seller on /seller-apply with status ${approvalStatus}, redirecting to ${targetPath}`);
          navigate(targetPath);
          return;
        }
        
        // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рдХрд┐рд╕реА рд╡рд┐рдХреНрд░реЗрддрд╛-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрде рдкрд░ рдирд╣реАрдВ рд╣реИ, рддреЛ рдЙрд╕реЗ рд▓рдХреНрд╖реНрдп рдкрде рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        // (рдЙрджрд╛рд╣рд░рдг: рдпрджрд┐ рд╡рд╣ рд╣реЛрдо рдкрд░ рд╣реИ, рддреЛ рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рднреЗрдЬреЗрдВ)
        if (!location.startsWith("/seller-") && !location.startsWith("/seller-apply")) {
            console.log(`AuthRedirectGuard: Seller on non-seller path, redirecting to ${targetPath}`);
            navigate(targetPath);
            return;
        }
        break; // рд╕реНрд╡рд┐рдЪ рд╕реЗ рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ, рдХреЛрдИ рдФрд░ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдирд╣реАрдВ
      }

      case "admin":
        if (!location.startsWith("/admin-dashboard")) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate("/admin-dashboard");
        }
        return;

      case "delivery":
        if (!location.startsWith("/delivery-dashboard")) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate("/delivery-dashboard");
        }
        return;

      case "customer":
      default:
        // тЬЕ рдЧреНрд░рд╛рд╣рдХ рдХреЛ /seller-apply рдкрд░ рдЬрд╛рдиреЗ рджреЗрдВ рдпрджрд┐ intent "become-seller" рд╣реИ
        if (intent === "become-seller" && location.startsWith("/seller-apply")) {
          console.log("AuthRedirectGuard: Customer wants to become seller, allowing access to /seller-apply");
          return; // рдЙрдиреНрд╣реЗрдВ рдпрд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рд╕рдВрд░рдХреНрд╖рд┐рдд рд╡рд┐рдХреНрд░реЗрддрд╛/рдПрдбрдорд┐рди/рдбрд┐рд▓реАрд╡рд░реА рдкреЗрдЬ рдкрд░ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (
          location.startsWith("/seller-") ||
          location.startsWith("/admin-") ||
          location.startsWith("/delivery-")
        ) {
          console.log("AuthRedirectGuard: Customer or unknown role on restricted page, redirecting to /.");
          navigate("/");
          return;
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрде рдкрд░ рд╣реИ, рддреЛ рдЙрд╕реЗ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ (рд╣реЛрдо рдХреЛ рдЫреЛрдбрд╝рдХрд░ рдЕрдирд╛рд╡рд╢реНрдпрдХ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рди рдХрд░реЗрдВ)
        if (isPublicPath && location !== "/") {
            console.log("AuthRedirectGuard: Customer on public path. No redirect.");
            return;
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рд╣реЛрдо рдкрд░ рдирд╣реАрдВ рд╣реИ рдФрд░ рдХреЛрдИ рдЕрдиреНрдп рд╡рд┐рд╢реЗрд╖ рдкрде рдирд╣реАрдВ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (location !== "/") {
          console.log("AuthRedirectGuard: Customer not on home, redirecting to /.");
          navigate("/");
        }
        return;
    }
  }, [user, isLoadingAuth, isAuthenticated, location, navigate, intent]); // isAuthenticated рдХреЛ dependencies рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ

  return null; // рдЧрд╛рд░реНрдб рдХреБрдЫ рднреА рд░реЗрдВрдбрд░ рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИ, рдХреЗрд╡рд▓ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░рддрд╛ рд╣реИ
}
