// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

// SSR-compatible intent extractor
function getIntentFromLocation(location: string): string | null {
  try {
    const url = new URL(location, "http://localhost"); // dummy base for parsing
    return url.searchParams.get("intent");
  } catch {
    return null;
  }
}

// рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрдереЛрдВ рдХреА рд╕реВрдЪреА
// рдЗрди рд░рд╛рд╕реНрддреЛрдВ рдкрд░ рдмрд┐рдирд╛ рд▓реЙрдЧрд┐рди рдХреЗ рднреА рдЬрд╛рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ
const PUBLIC_PATHS = [
  "/",
  "/product/", // /product/id рдХреЛ рдореИрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрд▓реИрд╢ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛
  "/cart",
  "/checkout",
  // "/admin-login", // AdminLogin рдХреЛ auth-specific рдореЗрдВ рд▓реЗ рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ рддрд╛рдХрд┐ рд▓реЙрдЧ-рдЗрди рдкрд░ рдпрд╣ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рди рдХрд░реЗ
];

// рд▓реЙрдЧрд┐рди/Firebase handler рдЬреИрд╕реЗ рд╕реНрдкреЗрд╢рд▓ рдСрде рдкрд╛рде
const AUTH_SPECIFIC_PATHS = [
  "/auth",
  "/login", // рдЕрдЧрд░ рдЖрдк рдЗрд╕реЗ auth рд╕реЗ рдЕрд▓рдЧ рд░рдЦрддреЗ рд╣реИрдВ
  "/admin-login", // AdminLogin рднреА рдЕрдм auth-specific рд╣реИ
  "/__/auth/handler",
];

export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const intent = getIntentFromLocation(location); // URL рд╕реЗ рдЗрдВрдЯреЗрдВрдЯ рдирд┐рдХрд╛рд▓реЗрдВ
  const { user, isLoadingAuth, isAuthenticated } = useAuth(); // useAuth рд╕реЗ рд╕реАрдзреЗ isAuthenticated рдорд┐рд▓ рд░рд╣рд╛ рд╣реИ

  useEffect(() => {
    console.group("AuthRedirectGuard Log");
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("isAuthenticated:", isAuthenticated);
    console.log("Current user (UUID):", user?.uuid || "null");
    console.log("Current location:", location);
    console.log("Intent:", intent);

    // Step 1: рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд▓реЛрдб рд╣реЛрдиреЗ рддрдХ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ
    if (isLoadingAuth) {
      console.log("AuthRedirectGuard: Still loading auth, returning.");
      console.groupEnd();
      return;
    }

    // рдХреБрдЫ рдЙрдкрдпреЛрдЧреА рдлреНрд▓реИрдЧреНрд╕
    const isOnPublicPath = PUBLIC_PATHS.some(
      (path) => location === path || (path.endsWith("/") && location.startsWith(path)) || (!path.endsWith("/") && location.startsWith(path + '/'))
    );
    const isOnAuthSpecificPath = AUTH_SPECIFIC_PATHS.some(
      (path) => location === path || location.startsWith(path + '/') || location.includes(path)
    );
    const isHome = location === "/";

    // --- ЁЯФТ рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реИ ---
    if (!isAuthenticated) {
      console.log("AuthRedirectGuard: User not logged in.");

      // рдпрджрд┐ 'become-seller' рдЗрдВрдЯреЗрдВрдЯ рд╣реИ рд▓реЗрдХрд┐рди рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рдирд╣реАрдВ рд╣реИ, рддреЛ рдЙрд╕реЗ рд▓реЙрдЧрд┐рди рдкреЗрдЬ рдкрд░ рднреЗрдЬреЗрдВ
      if (intent === "become-seller") {
        console.log("AuthRedirectGuard: Not logged in, but 'become-seller' intent. Redirecting to /auth (login).");
        navigate("/auth?intent=become-seller"); // рдЗрдВрдЯреЗрдВрдЯ рдХреЛ рдмрдирд╛рдП рд░рдЦреЗрдВ
        console.groupEnd();
        return;
      }
      
      // рдпрджрд┐ рдпреВрдЬрд░ рдХрд┐рд╕реА auth-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрд╛рде рдкрд░ рд╣реИ (рдЬреИрд╕реЗ /auth, /login, /admin-login)
      if (isOnAuthSpecificPath) {
        console.log("AuthRedirectGuard: Not logged in user on auth-specific path. Staying put.");
        console.groupEnd();
        return; // рдЙрд╕реЗ рд╡рд╣рд╛рдВ рд░рд╣рдиреЗ рджреЗрдВ рддрд╛рдХрд┐ рд╡рд╣ рд▓реЙрдЧрд┐рди рдХрд░ рд╕рдХреЗ
      }

      // рдпрджрд┐ рдпреВрдЬрд░ рдХрд┐рд╕реА рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрд╛рде рдкрд░ рд╣реИ (рдЬреИрд╕реЗ /, /product, /cart)
      if (isOnPublicPath) {
        console.log("AuthRedirectGuard: Not logged in user on public path. Staying put.");
        console.groupEnd();
        return; // рдЙрд╕реЗ рд╡рд╣рд╛рдВ рд░рд╣рдиреЗ рджреЗрдВ
      }

      // рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реИ рдФрд░ рди рд╣реА рдХрд┐рд╕реА auth-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдпрд╛ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрд╛рде рдкрд░ рд╣реИ
      // рддреЛ рдЙрд╕реЗ /auth рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ (рд╕рдВрд░рдХреНрд╖рд┐рдд рдкрд╛рде рддрдХ рдкрд╣реБрдВрдЪрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢)
      console.log("AuthRedirectGuard: Not logged in user on restricted non-public path. Redirecting to /auth.");
      navigate("/auth");
      console.groupEnd();
      return;
    }

    // --- ЁЯФУ рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рд╣реИ (`isAuthenticated` рдЕрдм true рд╣реИ) ---
    console.log(
      "AuthRedirectGuard: User is logged in. Current role:",
      user?.role,
      "Approval Status:",
      user?.seller?.approvalStatus
    );

    // тЬЕ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ 1: 'become-seller' рдЗрдВрдЯреЗрдВрдЯ рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
    if (intent === "become-seller") {
      console.log("AuthRedirectGuard: Logged in user with 'become-seller' intent.");
      // рдпрд╣рд╛рдВ рдпреВрдЬрд░ рдХреА рд╡рд░реНрддрдорд╛рди рд╡рд┐рдХреНрд░реЗрддрд╛ рд╕реНрдерд┐рддрд┐ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдирд┐рд░реНрдгрдп рд▓реЗрдВ
      const approvalStatus = user?.seller?.approvalStatus;
      let sellerTargetPath = "/seller-apply"; // рдбрд┐рдлрд╝реЙрд▓реНрдЯ

      if (user?.role === "seller") {
        if (approvalStatus === "approved") {
          sellerTargetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          sellerTargetPath = "/seller-status";
        }
      }
      
      // рдпрджрд┐ рдпреВрдЬрд░ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд╕рд╣реА рдкреЗрдЬ рдкрд░ рдирд╣реАрдВ рд╣реИ рддреЛ рд╣реА рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
      if (location !== sellerTargetPath && !location.startsWith(sellerTargetPath + '/')) {
        console.log(`AuthRedirectGuard: Redirecting to seller flow: ${sellerTargetPath}`);
        navigate(sellerTargetPath);
        console.groupEnd();
        return;
      }
      // рдпрджрд┐ рд╡рд╣ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд╕рд╣реА рдЬрдЧрд╣ рдкрд░ рд╣реИ, рддреЛ рдХреБрдЫ рди рдХрд░реЗрдВ рдФрд░ рдлреНрд▓реЛ рдЬрд╛рд░реА рд░рдЦреЗрдВ (рдЬреЛ рдХрд┐ рдЕрдЪреНрдЫреА рдмрд╛рдд рд╣реИ)
      console.log("AuthRedirectGuard: User already on correct seller intent path. Staying put.");
      console.groupEnd(); // рдЗрдВрдЯреЗрдВрдЯ рд╣реИрдВрдбрд▓ рд╣реЛ рдЧрдпрд╛, рдпрд╣рд╛рдВ рд╕реЗ рдмрд╛рд╣рд░
      return;
    }

    // тЬЕ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ 2: рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди рд╣реИ рдФрд░ 'auth-specific' рдкреЗрдЬ рдкрд░ рд╣реИ (рд▓реЗрдХрд┐рди рдХреЛрдИ рдЗрдВрдЯреЗрдВрдЯ рдирд╣реАрдВ рдерд╛), рддреЛ рд╣реЛрдо рдкрд░ рднреЗрдЬреЗрдВ
    // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ Google рд▓реЙрдЧрд┐рди рдХреЗ рдмрд╛рдж /__/auth/handler рдпрд╛ /auth рдкрд░ рди рдлрдВрд╕реЗ рдЕрдЧрд░ 'become-seller' рдЗрдВрдЯреЗрдВрдЯ рдирд╣реАрдВ рдерд╛ред
    if (isOnAuthSpecificPath) {
      console.log("AuthRedirectGuard: Logged in user on auth-specific page (no intent). Redirecting to /.");
      navigate("/");
      console.groupEnd();
      return;
    }

    // --- рд░реЛрд▓-рдЖрдзрд╛рд░рд┐рдд рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд▓реЙрдЬрд┐рдХ (рдХреЗрд╡рд▓ рдЬрдм рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реЛ рдФрд░ auth/public рдкрд╛рде рдкрд░ рди рд╣реЛ) ---
    let targetPath: string | null = null; // рдпрд╣ рд╡рд╣ рдкрд╛рде рд╣реИ рдЬрд╣рд╛рдВ рдпреВрдЬрд░ рдХреЛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП

    switch (user?.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus;
        if (approvalStatus === "approved") {
          targetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          targetPath = "/seller-status";
        } else {
          targetPath = "/seller-apply";
        }

        // рдпрджрд┐ рдпреВрдЬрд░ seller-specific рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ рдФрд░ рдЙрд╕рдХреЗ рд▓рд┐рдП рдПрдХ targetPath рд╣реИ, рддреЛ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (!location.startsWith("/seller-") && targetPath && location !== targetPath && !location.startsWith(targetPath + '/')) {
          console.log(`AuthRedirectGuard: Seller on non-seller path, redirecting to ${targetPath}`);
          navigate(targetPath);
          console.groupEnd();
          return;
        }
        break;
      }

      case "admin":
        targetPath = "/admin-dashboard";
        // рдпрджрд┐ рдПрдбрдорд┐рди рдХрд┐рд╕реА рдПрдбрдорд┐рди-рдбреИрд╢рдмреЛрд░реНрдб рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ
        if (!location.startsWith(targetPath)) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate(targetPath);
          console.groupEnd();
          return;
        }
        break;

      case "delivery":
        targetPath = "/delivery-dashboard";
        // рдпрджрд┐ рдбрд┐рд▓реАрд╡рд░реА рдХрд┐рд╕реА рдбрд┐рд▓реАрд╡рд░реА-рдбреИрд╢рдмреЛрд░реНрдб рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ
        if (!location.startsWith(targetPath)) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate(targetPath);
          console.groupEnd();
          return;
        }
        break;

      case "customer":
      default: // рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдЧреНрд░рд╛рд╣рдХ (рдпрд╛ рдЕрдЬреНрдЮрд╛рдд рднреВрдорд┐рдХрд╛)
        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рд╕рдВрд░рдХреНрд╖рд┐рдд рд╡рд┐рдХреНрд░реЗрддрд╛/рдПрдбрдорд┐рди/рдбрд┐рд▓реАрд╡рд░реА рдкреЗрдЬ рдкрд░ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (
          location.startsWith("/seller-") ||
          location.startsWith("/admin-") ||
          location.startsWith("/delivery-")
        ) {
          console.log("AuthRedirectGuard: Customer or unknown role on restricted page, redirecting to /.");
          navigate("/");
          console.groupEnd();
          return;
        }
        break; // рдХреЛрдИ рдЕрдиреНрдп рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдирд╣реАрдВ, рдЙрд╕реЗ рдкрдмреНрд▓рд┐рдХ рдпрд╛ рдЬрд╣рд╛рдВ рд╣реИ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
    }

    console.log("AuthRedirectGuard: Logged in user on appropriate path, staying put.");
    console.groupEnd();

  }, [user, isLoadingAuth, isAuthenticated, location, navigate, intent]);

  return null; // рдЧрд╛рд░реНрдб рдХреБрдЫ рднреА рд░реЗрдВрдбрд░ рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИ, рдХреЗрд╡рд▓ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░рддрд╛ рд╣реИ
}



