// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

// SSR-compatible intent extractor
function getIntentFromLocation(location: string): string | null {
  try {
    const url = new URL(location, "http://localhost"); // dummy base for parsing
    return url.searchParams.get("intent");
  } catch {
    return null;
  }
}

// рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрдереЛрдВ рдХреА рд╕реВрдЪреА
const PUBLIC_PATHS = [
  "/", // тЬЕ рд╣реЛрдо рдкреЗрдЬ рдХреЛ рдпрд╣рд╛рдБ рд░рдЦреЗрдВ, рд▓реЗрдХрд┐рди рдЗрд╕реЗ рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВрдЧреЗ
  "/product",
  "/cart",
  "/checkout",
  "/auth",
  "/login",
  "/admin-login",
  "/__/auth/handler",
];

export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const intent = getIntentFromLocation(location);
  const { user, isLoadingAuth, isAuthenticated } = useAuth();

  useEffect(() => {
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("isAuthenticated:", isAuthenticated);
    console.log("Current user (UUID):", user?.uuid || "null");
    console.log("Current location:", location);
    console.log("Intent:", intent);

    // тЬЕ Step 1: рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд▓реЛрдб рд╣реЛрдиреЗ рддрдХ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ
    if (isLoadingAuth) {
      console.log("AuthRedirectGuard: Still loading auth, returning.");
      return;
    }

    // тЬЕ рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдХреНрдпрд╛ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди рдПрдХ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрде рд╣реИ (auth, login, handler рдХреЛ рдЫреЛрдбрд╝рдХрд░)
    // рд╣рдо рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдпреВрдЬрд░ /auth рдкрд░ рдЬрд╛рдП, рднрд▓реЗ рд╣реА / рд╣реЛрдо рдкреЗрдЬ рдкрдмреНрд▓рд┐рдХ рд╣реЛред
    const isActuallyPublicPath = PUBLIC_PATHS.some(
      (path) => 
        (location === path && path !== "/auth" && path !== "/login" && path !== "/admin-login") || // рд╕рдЯреАрдХ рдореИрдЪ, рд▓реЗрдХрд┐рди рд▓реЙрдЧрд┐рди/рдПрдбрдорд┐рди-рд▓реЙрдЧрд┐рди/auth рдХреЛ рдкрдмреНрд▓рд┐рдХ рди рдорд╛рдиреЗрдВ рдЗрд╕ рд╕рдВрджрд░реНрдн рдореЗрдВ
        (path.endsWith("/") && location.startsWith(path) && path !== "/auth/") || 
        (path === "/__/auth/handler" && location.includes(path)) 
    );
    // рд╣реЛрдо рдкреЗрдЬ рдХреЛ рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдпрд╣ рдЕрдирдзрд┐рдХреГрдд рд╣реЛрдиреЗ рдкрд░ /auth рдкрд░ рдЬрд╛ рд╕рдХреЗ
    const isHome = location === "/";


    // ЁЯФТ рд╕реНрдЯреЗрдк 2: рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реИ
    if (!isAuthenticated) {
      console.log("AuthRedirectGuard: User not logged in.");
      
      // рдпрджрд┐ рдпреВрдЬрд░ /auth, /login, /admin-login рдкрд░ рдирд╣реАрдВ рд╣реИ
      // рдФрд░ рд╡рд╣ рдХрд┐рд╕реА рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ рдкрдмреНрд▓рд┐рдХ рдкрде рдкрд░ рдирд╣реАрдВ рд╣реИ (рдЬреИрд╕реЗ рдХрд┐ /product),
      // рдФрд░ рд╡рд╣ Firebase handler рдкрд░ рднреА рдирд╣реАрдВ рд╣реИ,
      // рддреЛ рдЙрд╕реЗ /auth рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВред
      if (
        !location.startsWith("/auth") &&
        !location.startsWith("/login") &&
        !location.startsWith("/admin-login") &&
        !location.includes("/__/auth/handler") &&
        !isActuallyPublicPath // рдпрджрд┐ рдпрд╣ рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдирд╣реАрдВ рд╣реИ (рдЬреИрд╕реЗ /product)
      ) {
        console.log("AuthRedirectGuard: Not on auth/login/public path, redirecting to /auth.");
        navigate("/auth");
        return;
      } 
      // тЬЕ рдпрджрд┐ рдпреВрдЬрд░ рд╣реЛрдо рдкреЗрдЬ рдкрд░ рд╣реИ рдФрд░ рд▓реЙрдЧ рдЗрди рдирд╣реАрдВ рд╣реИ, рддреЛ рдЙрд╕реЗ /auth рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
      else if (isHome && !location.startsWith("/auth")) { // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд╣рдо рдкрд╣рд▓реЗ рд╕реЗ /auth рдкрд░ рдирд╣реАрдВ рд╣реИрдВ
          console.log("AuthRedirectGuard: User not logged in and on home page, redirecting to /auth.");
          navigate("/auth");
          return;
      }
      console.log("AuthRedirectGuard: On a public/auth/handler path, staying put.");
      return; // рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрдереЛрдВ рдкрд░ рд░рд╣рдиреЗ рджреЗрдВ
    }

    // ЁЯФУ рд╕реНрдЯреЗрдк 3: рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рд╣реИ (`isAuthenticated` рдЕрдм true рд╣реИ)
    console.log(
      "AuthRedirectGuard: User is logged in. Current role:",
      user?.role
    );

    // рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди/auth рдкреЗрдЬ рдкрд░ рд╣реИ рд▓реЗрдХрд┐рди рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд▓реЙрдЧ рдЗрди рд╣реИ, рддреЛ рдЙрд╕реЗ рдЙрд╕рдХреА рднреВрдорд┐рдХрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
    if (location.startsWith("/auth") || location.startsWith("/login") || location.startsWith("/admin-login")) {
      let targetPath = "/"; // рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдЧреНрд░рд╛рд╣рдХ рд╣реЛрдо
      if (user?.role === "seller") {
        const approvalStatus = user.seller?.approvalStatus;
        if (approvalStatus === "approved") {
          targetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          targetPath = "/seller-status";
        } else {
          targetPath = "/seller-apply"; // рдпрджрд┐ рдЕрднреА рддрдХ рдЖрд╡реЗрджрди рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ
        }
      } else if (user?.role === "admin") {
        targetPath = "/admin-dashboard";
      } else if (user?.role === "delivery") {
        targetPath = "/delivery-dashboard";
      }

      console.log(`AuthRedirectGuard: Logged in user on auth page, redirecting to ${targetPath}.`);
      navigate(targetPath);
      return; // рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХреЗ рдмрд╛рдж рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ
    }

    // рд╕реНрдЯреЗрдк 4: рд░реЛрд▓-рдЖрдзрд╛рд░рд┐рдд рд╕рдВрд░рдХреНрд╖рд┐рдд рдорд╛рд░реНрдЧ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ (рд▓реЙрдЧрд┐рди/рдСрде рдкреЗрдЬ рдкрд░ рдирд╣реАрдВ рд╣реЛрдиреЗ рдкрд░)
    if (!user?.role) {
      console.warn("AuthRedirectGuard: User logged in but role is missing. Defaulting to home.");
      if (location !== "/") {
        navigate("/");
      }
      return;
    }

    let intendedRolePath: string | null = null;

    switch (user.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus;
        if (approvalStatus === "approved") {
          intendedRolePath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          intendedRolePath = "/seller-status";
        } else {
          intendedRolePath = "/seller-apply";
        }

        // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рдЕрдкрдиреЗ рдЕрдкреЗрдХреНрд╖рд┐рдд рдкрд╛рде рдкрд░ рд╣реИ рдпрд╛ /seller-apply рдкрд░ рд╣реИ
        if (location.startsWith(intendedRolePath) || location.startsWith("/seller-apply")) {
            // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ /seller-apply рдкрд░ рд╣реИ рдФрд░ рдЙрд╕рдХрд╛ рдЖрд╡реЗрджрди рдЕрдиреБрдореЛрджрд┐рдд/рд▓рдВрдмрд┐рдд рд╣реИ
            if (location.startsWith("/seller-apply") && (approvalStatus === "approved" || approvalStatus === "pending")) {
                if (location !== intendedRolePath) {
                    console.log(`AuthRedirectGuard: Seller on /seller-apply with status ${approvalStatus}, redirecting to ${intendedRolePath}`);
                    navigate(intendedRolePath);
                    return;
                }
            }
            // рдпрджрд┐ рд╡реЗ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдЕрдкрдиреЗ рд╕рд╣реА рдкрд╛рде рдкрд░ рд╣реИрдВ, рддреЛ рдХреБрдЫ рди рдХрд░реЗрдВ
            console.log(`AuthRedirectGuard: Seller already on correct seller path (${location}). No redirect.`);
            return;
        }
        
        // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рдХрд┐рд╕реА рдЧреИрд░-рд╡рд┐рдХреНрд░реЗрддрд╛ рд╕рдВрд░рдХреНрд╖рд┐рдд рдкрде рдкрд░ рд╣реИ рдпрд╛ рдЕрдкрдиреЗ рд╕рд╣реА рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдирд╣реАрдВ рд╣реИ
        if (
          !location.startsWith("/seller-") && 
          !location.startsWith("/admin-") && 
          !location.startsWith("/delivery-") && 
          !isActuallyPublicPath // рдпрджрд┐ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдирд╣реАрдВ рд╣реИ
        ) {
          console.log(`AuthRedirectGuard: Seller on non-seller/protected path, redirecting to ${intendedRolePath}`);
          navigate(intendedRolePath);
          return;
        }
        break;
      }

      case "admin":
        intendedRolePath = "/admin-dashboard";
        if (!location.startsWith(intendedRolePath)) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate(intendedRolePath);
          return;
        }
        break;

      case "delivery":
        intendedRolePath = "/delivery-dashboard";
        if (!location.startsWith(intendedRolePath)) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate(intendedRolePath);
          return;
        }
        break;

      case "customer":
      default:
        // тЬЕ рдЧреНрд░рд╛рд╣рдХ рдХреЛ /seller-apply рдкрд░ рдЬрд╛рдиреЗ рджреЗрдВ рдпрджрд┐ intent "become-seller" рд╣реИ
        if (intent === "become-seller" && location.startsWith("/seller-apply")) {
          console.log("AuthRedirectGuard: Customer wants to become seller, allowing access to /seller-apply");
          return; // рдЙрдиреНрд╣реЗрдВ рдпрд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рднреА рд╕рдВрд░рдХреНрд╖рд┐рдд рд╡рд┐рдХреНрд░реЗрддрд╛/рдПрдбрдорд┐рди/рдбрд┐рд▓реАрд╡рд░реА рдкреЗрдЬ рдкрд░ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (
          location.startsWith("/seller-") ||
          location.startsWith("/admin-") ||
          location.startsWith("/delivery-")
        ) {
          console.log("AuthRedirectGuard: Customer or unknown role on restricted page, redirecting to /.");
          navigate("/");
          return;
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрде рдкрд░ рд╣реИ (рд╣реЛрдо рдХреЛ рдЫреЛрдбрд╝рдХрд░), рддреЛ рдЙрд╕реЗ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
        if (isActuallyPublicPath && !isHome) { // рд╣реЛрдо рдХреЛ рдпрд╣рд╛рдВ рд╕реЗ рдмрд╛рд╣рд░ рд░рдЦреЗрдВ
            console.log("AuthRedirectGuard: Customer on public path (not home). No redirect.");
            return;
        }

        // тЬЕ рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рд╣реЛрдо рдкрд░ рд╣реИ рдФрд░ рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рдорд╛рдорд▓рд╛ рдирд╣реАрдВ рд╣реИ, рддреЛ рдЙрд╕реЗ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
        if (isHome) {
            console.log("AuthRedirectGuard: Customer on home page. Staying put.");
            return;
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рдРрд╕реЗ рдкрде рдкрд░ рд╣реИ рдЬреЛ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдирд╣реАрдВ рд╣реИ рдФрд░ рди рд╣реА рд╣реЛрдо рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (!isActuallyPublicPath && !isHome) {
          console.log("AuthRedirectGuard: Customer not on home/public path, redirecting to /.");
          navigate("/");
          return;
        }
        break;
    }

    // рдЕрдВрддрд┐рдо рдХреИрдЪ-рдСрд▓: рдпрджрд┐ рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдирд╣реАрдВ рд╣реБрдЖ рд╣реИ рдФрд░ рдпреВрдЬрд░ рдЕрдкрдиреЗ рдЕрдкреЗрдХреНрд╖рд┐рдд рд░реЛрд▓ рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ
    // рдФрд░ рд╡рд╣ рдЧреНрд░рд╛рд╣рдХ/рдЕрдЬреНрдЮрд╛рдд рднреВрдорд┐рдХрд╛ рдХрд╛ рд╣реИ рдФрд░ рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдПрдХ рдЧреИрд░-рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ/рдЧреИрд░-рд╣реЛрдо рдкрде рдкрд░ рд╣реИ
    if (
        isAuthenticated && 
        !isLoadingAuth && 
        user?.role === "customer" && // рдХреЗрд╡рд▓ рдЧреНрд░рд╛рд╣рдХреЛрдВ рдХреЗ рд▓рд┐рдП
        !isActuallyPublicPath && 
        !isHome
    ) {
        console.log("AuthRedirectGuard: Logged in customer on unhandled non-public/non-home path, redirecting to /.");
        navigate("/");
        return;
    }


  }, [user, isLoadingAuth, isAuthenticated, location, navigate, intent]);

  return null; // рдЧрд╛рд░реНрдб рдХреБрдЫ рднреА рд░реЗрдВрдбрд░ рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИ, рдХреЗрд╡рд▓ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░рддрд╛ рд╣реИ
}
