// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

// SSR-compatible intent extractor
function getIntentFromLocation(location: string): string | null {
  try {
    const url = new URL(location, "http://localhost"); // dummy base for parsing
    return url.searchParams.get("intent");
  } catch {
    return null;
  }
}

// рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрдереЛрдВ рдХреА рд╕реВрдЪреА
// тЬЕ рд╕рдЯреАрдХ рдорд┐рд▓рд╛рди рдпрд╛ startWith рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, includes рд╕реЗ рдмрдЪреЗрдВ рдпрджрд┐ рдпрд╣ рдмрд╣реБрдд рд╡реНрдпрд╛рдкрдХ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ
const PUBLIC_PATHS = [
  "/",
  "/product", // /product/:id рдЬреИрд╕реЗ рдХреЛ рднреА рдХрд╡рд░ рдХрд░ рд╕рдХрддрд╛ рд╣реИ рдпрджрд┐ рдпрд╣ рдмреЗрд╕ рдкрд╛рде рд╣реИ
  "/cart",
  "/checkout",
  "/auth",
  "/login", // рдпрджрд┐ рдпрд╣ /auth рд╕реЗ рдЕрд▓рдЧ рд╣реИ
  "/admin-login", // рдпрджрд┐ рдпрд╣ /auth рд╕реЗ рдЕрд▓рдЧ рд╣реИ
  // Firebase auth handler path (рдорд╣рддреНрд╡рдкреВрд░реНрдг)
  "/__/auth/handler", // рдпрд╣ рд╣рдореЗрд╢рд╛ includes() рд╕реЗ рдЪреЗрдХ рдХрд┐рдпрд╛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП
];

export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const intent = getIntentFromLocation(location);
  const { user, isLoadingAuth, isAuthenticated } = useAuth();

  useEffect(() => {
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("isAuthenticated:", isAuthenticated);
    console.log("Current user (UUID):", user?.uuid || "null");
    console.log("Current location:", location);
    console.log("Intent:", intent);

    // тЬЕ Step 1: рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд▓реЛрдб рд╣реЛрдиреЗ рддрдХ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ
    if (isLoadingAuth) {
      console.log("AuthRedirectGuard: Still loading auth, returning.");
      return;
    }

    // тЬЕ рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдХреНрдпрд╛ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди рдПрдХ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрде рд╣реИ
    const isCurrentPathPublic = PUBLIC_PATHS.some(
      (path) => 
        location === path || // рд╕рдЯреАрдХ рдореИрдЪ
        (path.endsWith("/") && location.startsWith(path)) || // рдЬреИрд╕реЗ /product/ рдХреЗ рд▓рд┐рдП
        (path === "/__/auth/handler" && location.includes(path)) // Firebase handler рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖
    );

    // ЁЯФТ рд╕реНрдЯреЗрдк 2: рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реИ
    if (!isAuthenticated) {
      console.log("AuthRedirectGuard: User not logged in.");
      // рдпрджрд┐ рд╡рд░реНрддрдорд╛рди рдкрде рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдирд╣реАрдВ рд╣реИ рдФрд░ Firebase auth handler рдирд╣реАрдВ рд╣реИ, рддреЛ /auth рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
      if (!isCurrentPathPublic) { // рдЕрдм isCurrentPathPublic рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        console.log("AuthRedirectGuard: Not on a public path, redirecting to /auth.");
        navigate("/auth");
        return; // рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХреЗ рдмрд╛рдж рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ
      }
      console.log("AuthRedirectGuard: On a public path, staying put.");
      return; // рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрдереЛрдВ рдкрд░ рд░рд╣рдиреЗ рджреЗрдВ
    }

    // ЁЯФУ рд╕реНрдЯреЗрдк 3: рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рд╣реИ (`isAuthenticated` рдЕрдм true рд╣реИ)
    console.log(
      "AuthRedirectGuard: User is logged in. Current role:",
      user?.role
    );

    // рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди/auth рдкреЗрдЬ рдкрд░ рд╣реИ рд▓реЗрдХрд┐рди рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд▓реЙрдЧ рдЗрди рд╣реИ, рддреЛ рдЙрд╕реЗ рдЙрд╕рдХреА рднреВрдорд┐рдХрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
    if (location.startsWith("/auth") || location.startsWith("/login") || location.startsWith("/admin-login")) {
      let targetPath = "/"; // рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдЧреНрд░рд╛рд╣рдХ рд╣реЛрдо
      if (user?.role === "seller") {
        const approvalStatus = user.seller?.approvalStatus;
        if (approvalStatus === "approved") {
          targetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          targetPath = "/seller-status";
        } else {
          targetPath = "/seller-apply"; // рдпрджрд┐ рдЕрднреА рддрдХ рдЖрд╡реЗрджрди рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ
        }
      } else if (user?.role === "admin") {
        targetPath = "/admin-dashboard";
      } else if (user?.role === "delivery") {
        targetPath = "/delivery-dashboard";
      }

      console.log(`AuthRedirectGuard: Logged in user on auth page, redirecting to ${targetPath}.`);
      navigate(targetPath);
      return; // рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХреЗ рдмрд╛рдж рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ
    }

    // рд╕реНрдЯреЗрдк 4: рд░реЛрд▓-рдЖрдзрд╛рд░рд┐рдд рд╕рдВрд░рдХреНрд╖рд┐рдд рдорд╛рд░реНрдЧ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ (рд▓реЙрдЧрд┐рди/рдСрде рдкреЗрдЬ рдкрд░ рдирд╣реАрдВ рд╣реЛрдиреЗ рдкрд░)
    // рдпрджрд┐ user рдпрд╛ user.role рдЧрд╛рдпрдм рд╣реИ, рддреЛ рднреА рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
    if (!user?.role) {
      console.warn("AuthRedirectGuard: User logged in but role is missing. Defaulting to home.");
      if (location !== "/") {
        navigate("/");
      }
      return;
    }

    let intendedRolePath: string | null = null;

    switch (user.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus;
        if (approvalStatus === "approved") {
          intendedRolePath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          intendedRolePath = "/seller-status";
        } else {
          intendedRolePath = "/seller-apply";
        }

        // рд╡рд┐рдХреНрд░реЗрддрд╛ рдХреЛ /seller-apply рдкрд░ рдЕрдиреБрдорддрд┐ рджреЗрдВ рдпрджрд┐ рдЙрдирдХрд╛ рдЖрд╡реЗрджрди рдЕрднреА pending/rejected рд╣реИ рдпрд╛ рдирд╣реАрдВ рднрд░рд╛ рд╣реИ
        // рд▓реЗрдХрд┐рди рдпрджрд┐ рдЙрдирдХрд╛ рдЖрд╡реЗрджрди approved рд╣реИ, рддреЛ рдЙрдиреНрд╣реЗрдВ /seller-dashboard рдкрд░ рднреЗрдЬреЗрдВ
        if (
          location.startsWith("/seller-apply") && 
          (approvalStatus === "approved" || approvalStatus === "pending")
        ) {
          if (location !== intendedRolePath) { // рдХреЗрд╡рд▓ рддрднреА рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ рдЬрдм рд╡реЗ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд╕рд╣реА рдкреЗрдЬ рдкрд░ рди рд╣реЛрдВ
            console.log(`AuthRedirectGuard: Seller on /seller-apply with status ${approvalStatus}, redirecting to ${intendedRolePath}`);
            navigate(intendedRolePath);
            return;
          }
        }
        
        // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рдХрд┐рд╕реА рдЧреИрд░-рд╡рд┐рдХреНрд░реЗрддрд╛ рд╕рдВрд░рдХреНрд╖рд┐рдд рдкрде рдкрд░ рд╣реИ рдпрд╛ рдЕрдкрдиреЗ рд╕рд╣реА рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдирд╣реАрдВ рд╣реИ
        if (
          !location.startsWith("/seller-") && 
          !location.startsWith("/admin-") && // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд╡реЗ рдЧрд▓рддреА рд╕реЗ рдПрдбрдорд┐рди/рдбрд┐рд▓реАрд╡рд░реА рдкреЗрдЬ рдкрд░ рди рд╣реЛрдВ
          !location.startsWith("/delivery-") && 
          !isCurrentPathPublic && // рдпрджрд┐ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдирд╣реАрдВ рд╣реИ
          location !== intendedRolePath
        ) {
          console.log(`AuthRedirectGuard: Seller on non-seller/protected path, redirecting to ${intendedRolePath}`);
          navigate(intendedRolePath);
          return;
        }
        break;
      }

      case "admin":
        intendedRolePath = "/admin-dashboard";
        if (!location.startsWith(intendedRolePath)) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate(intendedRolePath);
          return;
        }
        break;

      case "delivery":
        intendedRolePath = "/delivery-dashboard";
        if (!location.startsWith(intendedRolePath)) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate(intendedRolePath);
          return;
        }
        break;

      case "customer":
      default:
        // тЬЕ рдЧреНрд░рд╛рд╣рдХ рдХреЛ /seller-apply рдкрд░ рдЬрд╛рдиреЗ рджреЗрдВ рдпрджрд┐ intent "become-seller" рд╣реИ
        if (intent === "become-seller" && location.startsWith("/seller-apply")) {
          console.log("AuthRedirectGuard: Customer wants to become seller, allowing access to /seller-apply");
          return; // рдЙрдиреНрд╣реЗрдВ рдпрд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рднреА рд╕рдВрд░рдХреНрд╖рд┐рдд рд╡рд┐рдХреНрд░реЗрддрд╛/рдПрдбрдорд┐рди/рдбрд┐рд▓реАрд╡рд░реА рдкреЗрдЬ рдкрд░ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (
          location.startsWith("/seller-") ||
          location.startsWith("/admin-") ||
          location.startsWith("/delivery-")
        ) {
          console.log("AuthRedirectGuard: Customer or unknown role on restricted page, redirecting to /.");
          navigate("/");
          return;
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрде рдкрд░ рд╣реИ, рддреЛ рдЙрд╕реЗ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ (рд╣реЛрдо рдХреЛ рдЫреЛрдбрд╝рдХрд░ рдЕрдирд╛рд╡рд╢реНрдпрдХ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рди рдХрд░реЗрдВ)
        if (isCurrentPathPublic) { // рдЕрдм isCurrentPathPublic рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
            console.log("AuthRedirectGuard: Customer on public path. No redirect.");
            return;
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рд╣реЛрдо рдкрд░ рдирд╣реАрдВ рд╣реИ рдФрд░ рдХреЛрдИ рдЕрдиреНрдп рд╡рд┐рд╢реЗрд╖ рдкрде рдирд╣реАрдВ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        // рдпрд╣ рдЕрдВрддрд┐рдо рдХреИрдЪ-рдСрд▓ рд╣реИ, рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рдХреЗрд╡рд▓ рддрднреА рдЯреНрд░рд┐рдЧрд░ рд╣реЛ рдЬрдм рдХрд╣реАрдВ рдФрд░ рдЬрд╛рдиреЗ рдХреА рдХреЛрдИ рдФрд░ рд╡рдЬрд╣ рди рд╣реЛ
        if (location !== "/") {
          console.log("AuthRedirectGuard: Customer not on home/public path, redirecting to /.");
          navigate("/");
        }
        return;
    }

    // тЬЕ рдЕрдВрддрд┐рдо рдХреИрдЪ-рдСрд▓: рдпрджрд┐ рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдирд╣реАрдВ рд╣реБрдЖ рд╣реИ рдФрд░ рдпреВрдЬрд░ рдЕрдкрдиреЗ рдЕрдкреЗрдХреНрд╖рд┐рдд рд░реЛрд▓ рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ
    // рдпрд╣ рдЧреНрд░рд╛рд╣рдХ рдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЕрдзрд┐рдХ рд▓рд╛рдЧреВ рд╣реЛрддрд╛ рд╣реИ рдЬреЛ рдХрд┐рд╕реА рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд▓реЗрдХрд┐рди рдЧреИрд░-рд╣реЛрдо рдкреЗрдЬ рдкрд░ рд╣реИ
    if (isAuthenticated && !isLoadingAuth) {
        // рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реИ рдФрд░ рдХрд┐рд╕реА рд╕реНрдкреЗрд╕рд┐рдлрд┐рдХ рд░реЛрд▓ рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ, рдФрд░ рд╡рд╣ рдкрдмреНрд▓рд┐рдХ рдирд╣реАрдВ рд╣реИ
        // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ рдХреЛрдИ рдпреВрдЬрд░ рдмрд┐рдирд╛ рдХрд┐рд╕реА рд╕реНрдкрд╖реНрдЯ рдХрд╛рд░рдг рдХреЗ рдХрд╣реАрдВ рдФрд░ рди рдЬрд╛рдП
        if (
            !isCurrentPathPublic && 
            !location.startsWith(intendedRolePath || "") && // рдпрджрд┐ intendedRolePath рдкрд░рд┐рднрд╛рд╖рд┐рдд рд╣реИ
            (user?.role === "customer" || !user?.role) // рдЧреНрд░рд╛рд╣рдХ рдпрд╛ рдЕрдЬреНрдЮрд╛рдд рднреВрдорд┐рдХрд╛ рдХреЗ рд▓рд┐рдП
        ) {
            console.log("AuthRedirectGuard: Logged in customer/unknown role on unhandled path, redirecting to /.");
            navigate("/");
            return;
        }
    }


  }, [user, isLoadingAuth, isAuthenticated, location, navigate, intent]);

  return null; // рдЧрд╛рд░реНрдб рдХреБрдЫ рднреА рд░реЗрдВрдбрд░ рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИ, рдХреЗрд╡рд▓ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░рддрд╛ рд╣реИ
}
