// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const { user, isLoadingAuth } = useAuth(); // firebaseUser рдХреЛ рдпрд╣рд╛рдБ рд╕реЗ рд╣рдЯрд╛рдиреЗ рдХреЗ рдмрд╛рдж рднреА рдареАрдХ рдХрд╛рдо рдХрд░реЗрдЧрд╛

  useEffect(() => {
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("Current user:", user);
    console.log("Current location:", location);

    if (isLoadingAuth) {
        console.log("AuthRedirectGuard: Still loading auth, returning.");
        return;
    }

    const publicPaths = [
      "/", // рдпрд╣ рдЕрдХреНрд╕рд░ рд╣реЛрдо рдкреЗрдЬ рд╣реЛрддрд╛ рд╣реИ, рд▓реЗрдХрд┐рди рдЕрдЧрд░ рдпрд╣ рд▓реЙрдЧрд┐рди рдХреЗ рдмрд╛рдж рдХрд╛ рд▓реИрдВрдбрд┐рдВрдЧ рдкреЗрдЬ рдирд╣реАрдВ рд╣реИ, рддреЛ рдЗрд╕реЗ рд╣рдЯрд╛рдирд╛ рдкрдбрд╝ рд╕рдХрддрд╛ рд╣реИ
      "/product", // /product/:id рдХреЗ рд▓рд┐рдП
      "/cart",
      "/checkout",
      // "/auth", // тЬЕ рдЗрд╕реЗ рдЕрдм рдкрдмреНрд▓рд┐рдХ рдкрд╛рдереНрд╕ рд╕реЗ рд╣рдЯрд╛ рджреЗрдВ
      // "/login" // тЬЕ рдЗрд╕реЗ рднреА рдкрдмреНрд▓рд┐рдХ рдкрд╛рдереНрд╕ рд╕реЗ рд╣рдЯрд╛ рджреЗрдВ
    ];
    const isPublic = publicPaths.some((path) => location.startsWith(path));

    // тЬЕ рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реИ рдФрд░ рд▓реЙрдЧрд┐рди/рдкрдмреНрд▓рд┐рдХ рдкреЗрдЬ рдкрд░ рд╣реИ, рддреЛ рдЙрд╕реЗ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
    if (user) { // рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реИ
        // рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди/рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдкреЗрдЬ рдкрд░ рд╣реИ рдпрд╛ рдХрд┐рд╕реА рдРрд╕реЗ рдкрдмреНрд▓рд┐рдХ рдкреЗрдЬ рдкрд░ рд╣реИ рдЬрд╣рд╛рдБ рд╕реЗ рдЙрд╕реЗ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдП
        if (location.startsWith("/auth") || location.startsWith("/login") || location.startsWith("/admin-login")) {
            console.log("AuthRedirectGuard: User is logged in and on a login/auth page, redirecting based on role.");
            // рднреВрдорд┐рдХрд╛-рдЖрдзрд╛рд░рд┐рдд рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд▓реЙрдЬрд┐рдХ рдпрд╣рд╛рдБ рдЯреНрд░рд┐рдЧрд░ рд╣реЛрдЧрд╛
        } else if (isPublic && location === "/") { // рдпрджрд┐ рдпреВрдЬрд░ рд╣реЛрдо рдкреЗрдЬ рдкрд░ рд╣реИ рдФрд░ рд╡рд╣ рд╕рд┐рд░реНрдл рдкрдмреНрд▓рд┐рдХ рдирд╣реАрдВ рд╣реИ рдмрд▓реНрдХрд┐ рдПрдХ рд▓реИрдВрдбрд┐рдВрдЧ рдкреЗрдЬ рднреА рд╣реИ
            // рдпрджрд┐ '/' рдЖрдкрдХрд╛ рд▓реЙрдЧрд┐рди рдХреЗ рдмрд╛рдж рдХрд╛ рд▓реИрдВрдбрд┐рдВрдЧ рдкреЗрдЬ рд╣реИ, рддреЛ рдХреЛрдИ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдЖрд╡рд╢реНрдпрдХ рдирд╣реАрдВ рд╣реИ
            // рдпрджрд┐ '/' рдЖрдкрдХрд╛ рд▓реЙрдЧрд┐рди рдкреЗрдЬ рд╣реИ, рддреЛ рдКрдкрд░ рд╡рд╛рд▓реЗ if рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдЧрд╛
            console.log("AuthRedirectGuard: User is logged in and on a general public path, no redirect needed here.");
            return;
        } else if (!isPublic) {
            // рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реИ рдФрд░ рдПрдХ рдкреНрд░рд╛рдЗрд╡реЗрдЯ рдкрд╛рде рдкрд░ рд╣реИ, рддреЛ рдпрд╣реАрдВ рдкрд░ рднреВрдорд┐рдХрд╛-рдЖрдзрд╛рд░рд┐рдд рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд╣реЛрдЧрд╛
            // рдпрд╣ рдХреЛрдб 'switch (user.role)' рдмреНрд▓реЙрдХ рдореЗрдВ рдЬрд╛рдПрдЧрд╛
        }
    } else { // ЁЯЪл рд▓реЙрдЧ рдЗрди рдирд╣реАрдВ рд╣реИ
        console.log("AuthRedirectGuard: User not logged in, checking redirect.");
        if (!location.startsWith("/auth") && !location.startsWith("/login") && !location.startsWith("/admin-login")) {
            console.log("AuthRedirectGuard: Redirecting to /auth.");
            navigate("/auth");
        }
        return;
    }

    // тЬЕ рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реИ, рддреЛ рдпрд╣рд╛рдБ рд╕реЗ рднреВрдорд┐рдХрд╛-рдЖрдзрд╛рд░рд┐рдд рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд▓реЙрдЬрд┐рдХ рдЪрд▓реЗрдЧрд╛
    // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ user.role рд╣рдореЗрд╢рд╛ рдЙрдкрд▓рдмреНрдз рд╣реЛ
    if (!user.role) {
        console.log("AuthRedirectGuard: User logged in, but role is missing. Defaulting to customer dashboard.");
        if (!location.startsWith("/")) navigate("/");
        return;
    }

    console.log("AuthRedirectGuard: User logged in, checking role-based redirect for role:", user.role);

    switch (user.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus;
        let targetPath = "/seller-apply";

        if (approvalStatus === "approved") {
          targetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          targetPath = "/seller-status";
        }

        if (location.startsWith("/seller-apply") && (approvalStatus === "approved" || approvalStatus === "pending")) {
          console.log(`AuthRedirectGuard: Seller on /seller-apply, redirecting to ${targetPath}`);
          navigate(targetPath);
          return;
        }

        if (!location.startsWith(targetPath)) {
          console.log(`AuthRedirectGuard: Seller not on target path, redirecting to ${targetPath}`);
          navigate(targetPath);
        }
        return;
      }

      case "admin":
        if (!location.startsWith("/admin-dashboard")) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate("/admin-dashboard");
        }
        return;

      case "delivery":
        if (!location.startsWith("/delivery-dashboard")) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate("/delivery-dashboard");
        }
        return;

      case "customer":
      default:
        // рдпрджрд┐ рдпреВрдЬрд░ рдХрд╕реНрдЯрдорд░ рд╣реИ рдпрд╛ рднреВрдорд┐рдХрд╛ рдЕрдЬреНрдЮрд╛рдд рд╣реИ, рддреЛ рд╣рдореЗрд╢рд╛ / рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ рдпрджрд┐ рд╡реЗ рдкрд╣рд▓реЗ рд╕реЗ рд╡рд╣рд╛рдБ рдирд╣реАрдВ рд╣реИрдВ
        if (!location.startsWith("/")) {
            console.log("AuthRedirectGuard: Customer or unknown role, redirecting to /.");
            navigate("/");
        }
        return;
    }

  }, [user, isLoadingAuth, location, navigate]);

  return null;
}
