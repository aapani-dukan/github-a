// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const { user, isLoadingAuth } = useAuth();

  useEffect(() => {
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("Current user:", user);
    console.log("Current location:", location);

    if (isLoadingAuth) {
        console.log("AuthRedirectGuard: Still loading auth, returning.");
        return;
    }

    // ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§™‡§æ‡§•‡•ç‡§∏ ‡§ú‡§ø‡§®‡•ç‡§π‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
    const publicPaths = [
      "/",
      "/product", // /product/:id ‡§ï‡•á ‡§≤‡§ø‡§è
      "/cart",
      "/checkout",
      "/auth", // ‡§≤‡•â‡§ó‡§ø‡§®/‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§™‡•á‡§ú ‡§ñ‡•Å‡§¶ ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è
      "/login" // ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§≤‡•â‡§ó‡§ø‡§® ‡§™‡•á‡§ú
    ];
    const isPublic = publicPaths.some((path) => location.startsWith(path));

    if (isPublic) {
        console.log("AuthRedirectGuard: Current path is public, returning.");
        return;
    }

    // üö´ ‡§≤‡•â‡§ó ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‚Üí ‡§≤‡•â‡§ó‡§ø‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
    if (!user) {
        console.log("AuthRedirectGuard: User not logged in, checking redirect.");
        if (!location.startsWith("/auth") && !location.startsWith("/login") && !location.startsWith("/admin-login")) {
            console.log("AuthRedirectGuard: Redirecting to /auth.");
            navigate("/auth");
        }
        return;
    }

    // ‚úÖ ‡§≤‡•â‡§ó ‡§á‡§® ‡§π‡•à ‚Üí ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü
    console.log("AuthRedirectGuard: User logged in, checking role-based redirect for role:", user.role);

    switch (user.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus;
        let targetPath = "/seller-apply";

        if (approvalStatus === "approved") {
          targetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          targetPath = "/seller-status";
        }

        if (location.startsWith("/seller-apply") && (approvalStatus === "approved" || approvalStatus === "pending")) {
          console.log(`AuthRedirectGuard: Seller on /seller-apply, redirecting to ${targetPath}`);
          navigate(targetPath);
          return;
        }

        if (!location.startsWith(targetPath)) {
          console.log(`AuthRedirectGuard: Seller not on target path, redirecting to ${targetPath}`);
          navigate(targetPath);
        }
        return;
      }

      case "admin":
        if (!location.startsWith("/admin-dashboard")) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate("/admin-dashboard");
        }
        return;

      case "delivery":
        if (!location.startsWith("/delivery-dashboard")) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate("/delivery-dashboard");
        }
        return;

      case "customer":
      default:
        // ‡§Ø‡§π ‡§µ‡§π ‡§ú‡§ó‡§π ‡§π‡•à ‡§ú‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§´‡§Ç‡§∏ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ö‡§ó‡§∞ ‡§∞‡•ã‡§≤ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§π‡•à
        if (!location.startsWith("/")) {
            console.log("AuthRedirectGuard: Customer or unknown role, redirecting to /.");
            navigate("/");
        }
        return;
    }

  }, [user, isLoadingAuth, location, navigate]);

  return null;
}
