// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

// SSR-compatible intent extractor
function getIntentFromLocation(location: string): string | null {
  try {
    const url = new URL(location, "http://localhost"); // dummy base for parsing
    return url.searchParams.get("intent");
  } catch {
    return null;
  }
}

// рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрдереЛрдВ рдХреА рд╕реВрдЪреА
// рдЗрди рд░рд╛рд╕реНрддреЛрдВ рдкрд░ рдмрд┐рдирд╛ рд▓реЙрдЧрд┐рди рдХреЗ рднреА рдЬрд╛рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ
const PUBLIC_PATHS = [
  "/",
  "/product/", // /product/id рдХреЛ рдореИрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрд▓реИрд╢ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛
  "/cart",
  "/checkout",
  "/admin-login", // admin-login рдХреЛ рднреА рдкрдмреНрд▓рд┐рдХ рдорд╛рдирд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ рддрд╛рдХрд┐ рдХреЛрдИ рднреА рдЙрд╕ рдкреЗрдЬ рдкрд░ рдЬрд╛ рд╕рдХреЗ
];

// рд▓реЙрдЧрд┐рди/Firebase handler рдЬреИрд╕реЗ рд╕реНрдкреЗрд╢рд▓ рдСрде рдкрд╛рде
const AUTH_SPECIFIC_PATHS = [
  "/auth",
  "/login", // рдЕрдЧрд░ рдЖрдк рдЗрд╕реЗ auth рд╕реЗ рдЕрд▓рдЧ рд░рдЦрддреЗ рд╣реИрдВ
  "/__/auth/handler",
];

export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const intent = getIntentFromLocation(location);
  const { user, isLoadingAuth, isAuthenticated } = useAuth(); // useAuth рд╕реЗ рд╕реАрдзреЗ isAuthenticated рдорд┐рд▓ рд░рд╣рд╛ рд╣реИ

  useEffect(() => {
    console.group("AuthRedirectGuard Log");
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("isAuthenticated:", isAuthenticated);
    console.log("Current user (UUID):", user?.uuid || "null");
    console.log("Current location:", location);
    console.log("Intent:", intent);

    // Step 1: рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд▓реЛрдб рд╣реЛрдиреЗ рддрдХ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ
    if (isLoadingAuth) {
      console.log("AuthRedirectGuard: Still loading auth, returning.");
      console.groupEnd();
      return;
    }

    // рдХреБрдЫ рдЙрдкрдпреЛрдЧреА рдлреНрд▓реИрдЧреНрд╕
    const isOnPublicPath = PUBLIC_PATHS.some(
      (path) => location === path || (path.endsWith("/") && location.startsWith(path)) || (!path.endsWith("/") && location.startsWith(path + '/'))
    );
    const isOnAuthSpecificPath = AUTH_SPECIFIC_PATHS.some(
      (path) => location === path || location.startsWith(path + '/') || location.includes(path)
    );
    const isHome = location === "/";

    // --- ЁЯФУ рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рд╣реИ (`isAuthenticated` рдЕрдм true рд╣реИ) ---
    if (isAuthenticated) {
      console.log("AuthRedirectGuard: User is logged in. Current role:", user?.role, "Approval Status:", user?.seller?.approvalStatus);

      // тЬЕ рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди/auth рдкреЗрдЬ рдкрд░ рд╣реИ рд▓реЗрдХрд┐рди рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд▓реЙрдЧ рдЗрди рд╣реИ, рддреЛ рдЙрд╕реЗ рд╣реЛрдо рдкреЗрдЬ рдкрд░ рднреЗрдЬреЗрдВ
      // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рд▓реЙрдЧ-рдЗрди рд╣реЛрдиреЗ рдкрд░ рдпреВрдЬрд░ /auth рдпрд╛ /login рдкрд░ рди рдлрдВрд╕реЗред
      if (isOnAuthSpecificPath) {
        console.log("AuthRedirectGuard: Logged in user on auth-specific page, redirecting to /.");
        navigate("/"); 
        console.groupEnd();
        return;
      }

      // --- рд░реЛрд▓-рдЖрдзрд╛рд░рд┐рдд рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд▓реЙрдЬрд┐рдХ (рдХреЗрд╡рд▓ рдЬрдм рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реЛ рдФрд░ auth/public рдкрд╛рде рдкрд░ рди рд╣реЛ) ---
      let targetPath: string | null = null; // рдпрд╣ рд╡рд╣ рдкрд╛рде рд╣реИ рдЬрд╣рд╛рдВ рдпреВрдЬрд░ рдХреЛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП

      switch (user?.role) { // user? рддрд╛рдХрд┐ undefined/null рдкрд░ рдПрд░рд░ рди рдЖрдП
        case "seller": {
          const approvalStatus = user.seller?.approvalStatus;

          if (approvalStatus === "approved") {
            targetPath = "/seller-dashboard";
          } else if (approvalStatus === "pending") {
            targetPath = "/seller-status";
          } else { // rejected рдпрд╛ рдХреЛрдИ рдФрд░ рд╕реНрдерд┐рддрд┐
            targetPath = "/seller-apply";
          }

          if (intent === "become-seller" || !location.startsWith("/seller-")) {
            // рдпрджрд┐ рдЗрдВрдЯреЗрдВрдЯ рд╣реИ рдпрд╛ рдпреВрдЬрд░ рд╡рд┐рдХреНрд░реЗрддрд╛-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ
            if (location !== targetPath && !location.startsWith(targetPath + '/')) { // рд╕рд┐рд░реНрдл рддрднреА рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ рдЬрдм рдкрд╣рд▓реЗ рд╕реЗ рд╕рд╣реА рдЬрдЧрд╣ рдкрд░ рди рд╣реЛрдВ
                console.log(`AuthRedirectGuard: Seller user (status: ${approvalStatus}) with intent/on wrong path. Redirecting to ${targetPath}`);
                navigate(targetPath);
                console.groupEnd();
                return;
            }
          }
          break;
        }

        case "admin":
          targetPath = "/admin-dashboard";
          if (intent === "become-seller") { 
            console.log("AuthRedirectGuard: Admin user with 'become-seller' intent, redirecting to /seller-apply.");
            navigate("/seller-apply");
            console.groupEnd();
            return;
          }
          if (!location.startsWith(targetPath)) {
            console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
            navigate(targetPath);
            console.groupEnd();
            return;
          }
          break;

        case "delivery":
          targetPath = "/delivery-dashboard";
          if (intent === "become-seller") { 
            console.log("AuthRedirectGuard: Delivery user with 'become-seller' intent, redirecting to /seller-apply.");
            navigate("/seller-apply");
            console.groupEnd();
            return;
          }
          if (!location.startsWith(targetPath)) {
            console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
            navigate(targetPath);
            console.groupEnd();
            return;
          }
          break;

        case "customer":
        default: // рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдЧреНрд░рд╛рд╣рдХ (рдпрд╛ рдЕрдЬреНрдЮрд╛рдд рднреВрдорд┐рдХрд╛)
          if (intent === "become-seller") {
            console.log("AuthRedirectGuard: Customer with 'become-seller' intent, redirecting to /seller-apply.");
            navigate("/seller-apply");
            console.groupEnd();
            return;
          }
          // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рд╕рдВрд░рдХреНрд╖рд┐рдд рд╡рд┐рдХреНрд░реЗрддрд╛/рдПрдбрдорд┐рди/рдбрд┐рд▓реАрд╡рд░реА рдкреЗрдЬ рдкрд░ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
          if (
            location.startsWith("/seller-") ||
            location.startsWith("/admin-") ||
            location.startsWith("/delivery-")
          ) {
            console.log("AuthRedirectGuard: Customer or unknown role on restricted page, redirecting to /.");
            navigate("/");
            console.groupEnd();
            return;
          }
          break; // рдХреЛрдИ рдЕрдиреНрдп рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдирд╣реАрдВ, рдЙрд╕реЗ рдкрдмреНрд▓рд┐рдХ рдпрд╛ рдЬрд╣рд╛рдВ рд╣реИ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
      }

      console.log("AuthRedirectGuard: Logged in user on appropriate path, staying put.");
      console.groupEnd();
      return; // рдпрджрд┐ рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдирд╣реАрдВ рд╣реБрдЖ, рддреЛ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди рдкрд░ рд░рд╣реЗрдВ
    }

    // --- ЁЯФТ рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реИ ---
    console.log("AuthRedirectGuard: User not logged in.");

    // рдпрджрд┐ рдпреВрдЬрд░ рдХрд┐рд╕реА auth-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрд╛рде рдкрд░ рд╣реИ (рдЬреИрд╕реЗ /auth, /login, /admin-login)
    if (isOnAuthSpecificPath) {
      console.log("AuthRedirectGuard: Not logged in user on auth-specific path. Staying put.");
      console.groupEnd();
      return; // рдЙрд╕реЗ рд╡рд╣рд╛рдВ рд░рд╣рдиреЗ рджреЗрдВ рддрд╛рдХрд┐ рд╡рд╣ рд▓реЙрдЧрд┐рди рдХрд░ рд╕рдХреЗ
    }

    // рдпрджрд┐ рдпреВрдЬрд░ рдХрд┐рд╕реА рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрд╛рде рдкрд░ рд╣реИ (рдЬреИрд╕реЗ /, /product, /cart)
    if (isOnPublicPath) {
      console.log("AuthRedirectGuard: Not logged in user on public path. Staying put.");
      console.groupEnd();
      return; // рдЙрд╕реЗ рд╡рд╣рд╛рдВ рд░рд╣рдиреЗ рджреЗрдВ
    }

    // рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реИ рдФрд░ рди рд╣реА рдХрд┐рд╕реА auth-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдпрд╛ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрд╛рде рдкрд░ рд╣реИ
    // рддреЛ рдЙрд╕реЗ /auth рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ (рд╕рдВрд░рдХреНрд╖рд┐рдд рдкрд╛рде рддрдХ рдкрд╣реБрдВрдЪрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢)
    console.log("AuthRedirectGuard: Not logged in user on restricted non-public path. Redirecting to /auth.");
    navigate("/auth");
    console.groupEnd();
    
  }, [user, isLoadingAuth, isAuthenticated, location, navigate, intent]);

  return null; // рдЧрд╛рд░реНрдб рдХреБрдЫ рднреА рд░реЗрдВрдбрд░ рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИ, рдХреЗрд╡рд▓ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░рддрд╛ рд╣реИ
}
