// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react"; import { useAuth } from "@/hooks/useAuth"; import { useLocation } from "wouter";

/**

Centralized route-guard

Allows access to public pages without login


Redirects to appropriate dashboard based on user role */ export function AuthRedirectGuard() { const [location, navigate] = useLocation(); const { user, isLoadingAuth } = useAuth();



useEffect(() => { if (isLoadingAuth) return;

// ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§™‡§æ‡§•‡•ç‡§∏ ‡§ú‡§ø‡§®‡•ç‡§π‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
const publicPaths = [
  "/",
  "/product", // /product/:id ‡§ï‡•á ‡§≤‡§ø‡§è
  "/cart",
  "/checkout",
  "/auth", // ‡§≤‡•â‡§ó‡§ø‡§®/‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§™‡•á‡§ú ‡§ñ‡•Å‡§¶ ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è
  "/login" // ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§≤‡•â‡§ó‡§ø‡§® ‡§™‡•á‡§ú
];
const isPublic = publicPaths.some((path) => location.startsWith(path));
if (isPublic) return;

// üö´ ‡§≤‡•â‡§ó ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‚Üí ‡§≤‡•â‡§ó‡§ø‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
if (!user) {
  if (!location.startsWith("/auth") && !location.startsWith("/login") && !location.startsWith("/admin-login")) {
    navigate("/auth");
  }
  return;
}

// ‚úÖ ‡§≤‡•â‡§ó ‡§á‡§® ‡§π‡•à ‚Üí ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü
switch (user.role) {
  case "seller": {
    const approvalStatus = user.seller?.approvalStatus;
    let targetPath = "/seller-apply";

    if (approvalStatus === "approved") {
      targetPath = "/seller-dashboard";
    } else if (approvalStatus === "pending") {
      targetPath = "/seller-status";
    }

    if (location.startsWith("/seller-apply") && (approvalStatus === "approved" || approvalStatus === "pending")) {
      navigate(targetPath);
      return;
    }

    if (!location.startsWith(targetPath)) {
      navigate(targetPath);
    }
    return;
  }

  case "admin":
    if (!location.startsWith("/admin-dashboard")) {
      navigate("/admin-dashboard");
    }
    return;

  case "delivery":
    if (!location.startsWith("/delivery-dashboard")) {
      navigate("/delivery-dashboard");
    }
    return;

  case "customer":
  default:
    if (!location.startsWith("/")) navigate("/");
}

}, [user, isLoadingAuth, location, navigate]);

return null; }

