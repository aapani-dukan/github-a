// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

// SSR-compatible intent extractor
function getIntentFromLocation(location: string): string | null {
  try {
    const url = new URL(location, "http://localhost"); // dummy base for parsing
    return url.searchParams.get("intent");
  } catch {
    return null;
  }
}

// рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрдереЛрдВ рдХреА рд╕реВрдЪреА
// тЬЕ рдЗрди рд░рд╛рд╕реНрддреЛрдВ рдкрд░ рдмрд┐рдирд╛ рд▓реЙрдЧрд┐рди рдХреЗ рднреА рдЬрд╛рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ
const PUBLIC_PATHS = [
  "/",
  "/product",
  "/cart",
  "/checkout",
];

// тЬЕ рд▓реЙрдЧрд┐рди/рдПрдбрдорд┐рди-рд▓реЙрдЧрд┐рди/Firebase handler рдЬреИрд╕реЗ рд╕реНрдкреЗрд╢рд▓ рдСрде рдкрд╛рде
const AUTH_SPECIFIC_PATHS = [
  "/auth",
  "/login",
  "/admin-login",
  "/__/auth/handler",
];


export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const intent = getIntentFromLocation(location);
  const { user, isLoadingAuth, isAuthenticated } = useAuth();

  useEffect(() => {
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("isAuthenticated:", isAuthenticated);
    console.log("Current user (UUID):", user?.uuid || "null");
    console.log("Current location:", location);
    console.log("Intent:", intent);

    // тЬЕ Step 1: рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд▓реЛрдб рд╣реЛрдиреЗ рддрдХ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ
    if (isLoadingAuth) {
      console.log("AuthRedirectGuard: Still loading auth, returning.");
      return;
    }

    // тЬЕ рдХреБрдЫ рдЙрдкрдпреЛрдЧреА рдлреНрд▓реИрдЧреНрд╕
    const isOnPublicPath = PUBLIC_PATHS.some(
      (path) => location === path || (path.endsWith("/") && location.startsWith(path))
    );
    const isOnAuthSpecificPath = AUTH_SPECIFIC_PATHS.some(
      (path) => location === path || location.startsWith(path) || location.includes(path)
    );
    const isHome = location === "/";


    // --- ЁЯФТ рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реИ ---
    if (!isAuthenticated) {
      console.log("AuthRedirectGuard: User not logged in.");

      // рдпрджрд┐ рдпреВрдЬрд░ /auth рдпрд╛ рдХрд┐рд╕реА рдСрде-рд╕реНрдкреЗрд╕рд┐рдлрд┐рдХ рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ
      // рдФрд░ рд╡рд╣ рдХрд┐рд╕реА рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрде рдкрд░ рднреА рдирд╣реАрдВ рд╣реИ, рддреЛ рдЙрд╕реЗ /auth рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВред
      // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рд╕рдВрд░рдХреНрд╖рд┐рдд рдорд╛рд░реНрдЧ рддрдХ рдкрд╣реБрдВрдЪрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдХреЛ /auth рдкрд░ рднреЗрдЬрд╛ рдЬрд╛рдПред
      if (!isOnAuthSpecificPath && !isOnPublicPath) {
        console.log("AuthRedirectGuard: Not on auth/public path, redirecting to /auth.");
        navigate("/auth");
        return;
      }
      
      // тЬЕ рдРрдк рдЦреЛрд▓рдиреЗ рдкрд░: рдпрджрд┐ рдпреВрдЬрд░ рд╣реЛрдо рдкреЗрдЬ рдкрд░ рд╣реИ рдФрд░ рд▓реЙрдЧ рдЗрди рдирд╣реАрдВ рд╣реИ, рддреЛ рдЙрд╕реЗ /auth рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
      // (рдпрд╣ рдЖрдкрдХреЗ рдкрд╣рд▓реЗ рдирд┐рдпрдо рдХрд╛ рдкрд╛рд▓рди рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдРрдк рдЦреБрд▓рддреЗ рд╣реА рдЕрдирдзрд┐рдХреГрдд рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди рдкреЗрдЬ рдкрд░ рдЬрд╛рдП)
      if (isHome && !isOnAuthSpecificPath) { // рдпрджрд┐ рд╡реЗ рд╣реЛрдо рдкрд░ рд╣реИрдВ рдФрд░ /auth рдкрд░ рдирд╣реАрдВ рд╣реИрдВ
        console.log("AuthRedirectGuard: User not logged in and on home page, redirecting to /auth.");
        navigate("/auth");
        return;
      }

      console.log("AuthRedirectGuard: On a public/auth-specific path, staying put.");
      return; // рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдпрд╛ auth-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрдереЛрдВ рдкрд░ рд░рд╣рдиреЗ рджреЗрдВ
    }

    // --- ЁЯФУ рдпреВрдЬрд╝рд░ рд▓реЙрдЧрд┐рди рд╣реИ (`isAuthenticated` рдЕрдм true рд╣реИ) ---
    console.log(
      "AuthRedirectGuard: User is logged in. Current role:",
      user?.role,
      "Approval Status:",
      user?.seller?.approvalStatus
    );

    // тЬЕ рдРрдк рдЦреБрд▓рдиреЗ рдкрд░/рд▓реЙрдЧрд┐рди рдХреЗ рдмрд╛рдж: рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧрд┐рди/auth рдкреЗрдЬ рдкрд░ рд╣реИ рд▓реЗрдХрд┐рди рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд▓реЙрдЧ рдЗрди рд╣реИ
    // рддреЛ рдЙрд╕реЗ рд╣реЛрдо рдкреЗрдЬ рдкрд░ рднреЗрдЬреЗрдВ (рдЖрдкрдХреЗ рдирд┐рдпрдо 1 рдХрд╛ рдкрд╛рд▓рди рдХрд░рддреЗ рд╣реБрдП: рд▓реЙрдЧрд┐рди рдХреЗ рдмрд╛рдж рд╣реЛрдо рдкреЗрдЬ)
    if (isOnAuthSpecificPath) {
      console.log("AuthRedirectGuard: Logged in user on auth-specific page, redirecting to /.");
      navigate("/"); // рд▓реЙрдЧрд┐рди рдХреЗ рдмрд╛рдж рд╣рдореЗрд╢рд╛ рд╣реЛрдо рдкрд░ рднреЗрдЬреЗрдВ рдЬреИрд╕рд╛ рдЖрдкрдиреЗ рдмрддрд╛рдпрд╛
      return;
    }

    // --- рд░реЛрд▓-рдЖрдзрд╛рд░рд┐рдд рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд▓реЙрдЬрд┐рдХ ---
    if (!user?.role) {
      console.warn("AuthRedirectGuard: User logged in but role is missing. Defaulting to home.");
      if (location !== "/") {
        navigate("/");
      }
      return;
    }

    let targetPath: string | null = null; // рдпрд╣ рд╡рд╣ рдкрд╛рде рд╣реИ рдЬрд╣рд╛рдВ рдпреВрдЬрд░ рдХреЛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП

    switch (user.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus;

        // рдирд┐рдпрдо: 1.seller-approved to seller dashboard
        if (approvalStatus === "approved") {
          targetPath = "/seller-dashboard";
        } 
        // рдирд┐рдпрдо: 2. Seller - pending to please wait
        else if (approvalStatus === "pending") {
          targetPath = "/seller-status";
        } 
        // рдирд┐рдпрдо: 3. рдЗрдирдХреЗ рдЕрд▓рд╛рд╡рд╛ рдХреЛрдИ рднреА рд░реЛрд▓/рд╕реНрдЯреЗрдЯрд╕ рд╣реЛ рддреЛ seller apply form
        else {
          targetPath = "/seller-apply";
        }

        // рдпрджрд┐ рдпреВрдЬрд░ рдХрд╛ рдЗрд░рд╛рджрд╛ "become-seller" рд╣реИ (рдмрдЯрди рджрдмрд╛рдиреЗ рдХреЗ рдмрд╛рдж)
        if (intent === "become-seller") {
            console.log(`AuthRedirectGuard: Seller user (status: ${approvalStatus}) with 'become-seller' intent. Redirecting to ${targetPath}`);
            navigate(targetPath);
            return;
        }

        // рдпрджрд┐ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдЕрдкреЗрдХреНрд╖рд┐рдд рдкрд╛рде рдкрд░ рд╣реИ, рддреЛ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рди рдХрд░реЗрдВ
        if (location.startsWith(targetPath)) {
            console.log(`AuthRedirectGuard: Seller already on correct path (${location}). No redirect.`);
            return;
        }
        
        // рдпрджрд┐ рд╡рд┐рдХреНрд░реЗрддрд╛ рдХрд┐рд╕реА рдЧреИрд░-рд╡рд┐рдХреНрд░реЗрддрд╛ рд╕рдВрд░рдХреНрд╖рд┐рдд рдкрде рдкрд░ рд╣реИ, рддреЛ рдЙрд╕реЗ рдЙрд╕рдХреЗ рдЕрдкреЗрдХреНрд╖рд┐рдд рдкрде рдкрд░ рднреЗрдЬреЗрдВ
        if (
          !location.startsWith("/seller-") && // рдпрджрд┐ рд╡рд╣ рд╡рд┐рдХреНрд░реЗрддрд╛-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрде рдкрд░ рдирд╣реАрдВ рд╣реИ
          !location.startsWith("/admin-") && // рдФрд░ рдПрдбрдорд┐рди рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ
          !location.startsWith("/delivery-") && // рдФрд░ рдбрд┐рд▓реАрд╡рд░реА рдкрд╛рде рдкрд░ рдирд╣реАрдВ рд╣реИ
          !isOnPublicPath // рдФрд░ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрд╛рде рдкрд░ рднреА рдирд╣реАрдВ рд╣реИ
        ) {
          console.log(`AuthRedirectGuard: Seller on non-seller/protected path, redirecting to ${targetPath}`);
          navigate(targetPath);
          return;
        }
        break; // рд╕реНрд╡рд┐рдЪ рд╕реЗ рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ
      }

      case "admin":
        targetPath = "/admin-dashboard";
        if (intent === "become-seller") { // рдПрдбрдорд┐рди рднреА seller рдмрди рд╕рдХрддрд╛ рд╣реИ
            console.log("AuthRedirectGuard: Admin user with 'become-seller' intent, redirecting to /seller-apply.");
            navigate("/seller-apply");
            return;
        }
        if (!location.startsWith(targetPath)) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate(targetPath);
          return;
        }
        break;

      case "delivery":
        targetPath = "/delivery-dashboard";
        if (intent === "become-seller") { // рдбрд┐рд▓реАрд╡рд░реА рднреА seller рдмрди рд╕рдХрддрд╛ рд╣реИ
            console.log("AuthRedirectGuard: Delivery user with 'become-seller' intent, redirecting to /seller-apply.");
            navigate("/seller-apply");
            return;
        }
        if (!location.startsWith(targetPath)) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate(targetPath);
          return;
        }
        break;

      case "customer":
      default: // рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдЧреНрд░рд╛рд╣рдХ (рдпрд╛ рдЕрдЬреНрдЮрд╛рдд рднреВрдорд┐рдХрд╛)
        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ "become-seller" рдЗрдВрдЯреЗрдВрдЯ рдХреЗ рд╕рд╛рде рд╣реИ, рддреЛ /seller-apply рдкрд░ рднреЗрдЬреЗрдВ
        if (intent === "become-seller") {
          console.log("AuthRedirectGuard: Customer with 'become-seller' intent, redirecting to /seller-apply.");
          navigate("/seller-apply");
          return;
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рд╕рдВрд░рдХреНрд╖рд┐рдд рд╡рд┐рдХреНрд░реЗрддрд╛/рдПрдбрдорд┐рди/рдбрд┐рд▓реАрд╡рд░реА рдкреЗрдЬ рдкрд░ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
        if (
          location.startsWith("/seller-") ||
          location.startsWith("/admin-") ||
          location.startsWith("/delivery-")
        ) {
          console.log("AuthRedirectGuard: Customer or unknown role on restricted page, redirecting to /.");
          navigate("/");
          return;
        }

        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рд╣реЛрдо рдкрд░ рд╣реИ, рддреЛ рдЙрд╕реЗ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ (рдЖрдкрдХрд╛ рдирд┐рдпрдо)
        if (isHome) {
            console.log("AuthRedirectGuard: Customer on home page. Staying put.");
            return;
        }
        
        // рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ (рд▓реЗрдХрд┐рди рд╣реЛрдо рдирд╣реАрдВ) рдкрде рдкрд░ рд╣реИ, рддреЛ рдЙрд╕реЗ рд╡рд╣реАрдВ рд░рд╣рдиреЗ рджреЗрдВ
        if (isOnPublicPath && !isHome) {
            console.log("AuthRedirectGuard: Customer on public path (not home). Staying put.");
            return;
        }

        // рдЕрдВрддрд┐рдо рдХреИрдЪ-рдСрд▓: рдпрджрд┐ рдЧреНрд░рд╛рд╣рдХ рдХрд┐рд╕реА рдЕрдирд╣реИрдВрдбрд▓реНрдб рдпрд╛ рдЧреИрд░-рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрде рдкрд░ рд╣реИ, рддреЛ рд╣реЛрдо рдкрд░ рднреЗрдЬреЗрдВ
        if (!isOnPublicPath) { // рдЕрдЧрд░ рдкрдмреНрд▓рд┐рдХ рдирд╣реАрдВ рд╣реИ рддреЛ рд╣реЛрдо рдкрд░ рднреЗрдЬ рджреЛ
          console.log("AuthRedirectGuard: Customer not on public path, redirecting to /.");
          navigate("/");
          return;
        }
        break;
    }

    // тЬЕ рдЕрдВрддрд┐рдо рдХреИрдЪ-рдСрд▓: рдпрджрд┐ рдпреВрдЬрд░ рд▓реЙрдЧ рдЗрди рд╣реИ рдФрд░ рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд▓рд╛рдЧреВ рдирд╣реАрдВ рд╣реЛрддрд╛ рд╣реИ,
    // рддреЛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд╡реЗ рд╣реЛрдо рдкреЗрдЬ рдкрд░ рд╣реИрдВ рдпрджрд┐ рд╡реЗ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдХрд┐рд╕реА рд╡реИрдз рд╕реНрдерд╛рди рдкрд░ рдирд╣реАрдВ рд╣реИрдВ
    // (рдпрд╣ рдореБрдЦреНрдп рд░реВрдк рд╕реЗ рдЧреНрд░рд╛рд╣рдХ рдХреЗ рд▓рд┐рдП рд╣реИ рдЬреЛ рдХрд┐рд╕реА рдЕрдирдкреЗрдХреНрд╖рд┐рдд рдЧреИрд░-рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрде рдкрд░ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ)
    if (isAuthenticated && !isLoadingAuth && user?.role === "customer") {
        if (!isOnPublicPath && !isHome && !isOnAuthSpecificPath) { // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рдХрд┐рд╕реА рднреА рд╡реИрдз рдкрде рдкрд░ рдирд╣реАрдВ рд╣реИ
            console.log("AuthRedirectGuard: Logged in customer on unhandled non-public path, redirecting to /.");
            navigate("/");
            return;
        }
    }


  }, [user, isLoadingAuth, isAuthenticated, location, navigate, intent]);

  return null; // рдЧрд╛рд░реНрдб рдХреБрдЫ рднреА рд░реЗрдВрдбрд░ рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИ, рдХреЗрд╡рд▓ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░рддрд╛ рд╣реИ
}
