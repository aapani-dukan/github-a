// src/lib/firebase.ts

import { initializeApp } from "firebase/app";
import {
  getAuth,
  signInWithRedirect,
  getRedirectResult,
  GoogleAuthProvider,
  signOut,
  User as FirebaseUser,
  setLogLevel, // ‚úÖ Firebase Auth ‡§ï‡•á ‡§°‡•Ä‡§¨‡§ó ‡§≤‡•â‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
} from "firebase/auth";

// üîê Firebase Configuration
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

// üîå Initialize Firebase App and Auth
let app;
let authInstance;

try {
  if (!firebaseConfig.apiKey || firebaseConfig.apiKey === "undefined") {
    throw new Error("Firebase API Key is missing or undefined. Check your .env file and Render environment variables.");
  }

  // ‚úÖ Firebase Auth SDK ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•Ä‡§¨‡§ó ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç
  setLogLevel('debug'); 
  console.log("Firebase Init: Attempting to initialize Firebase app with config:", {
    projectId: firebaseConfig.projectId,
    apiKeyPreview: firebaseConfig.apiKey ? firebaseConfig.apiKey.substring(0, 5) + "..." : "EMPTY",
  });

  app = initializeApp(firebaseConfig);
  authInstance = getAuth(app);
  
  console.log("Firebase Init: Firebase app and auth initialized successfully.");

} catch (error) {
  console.error("Firebase Init: CRITICAL ERROR during Firebase initialization. This might cause blank pages or auth issues:", error);
}

export const auth = authInstance;

// üì° Google Provider Setup
export const googleProvider = auth ? new GoogleAuthProvider() : null;

if (googleProvider) {
  googleProvider.addScope("email");
  googleProvider.addScope("profile");
  // ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è
  googleProvider.setCustomParameters({ prompt: "select_account" }); 
} else {
  console.error("Firebase: GoogleAuthProvider could not be initialized because Firebase auth failed to initialize.");
}

// üîë Authentication Functions

/**
 * Google ‡§∏‡§æ‡§á‡§®-‡§á‡§® ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§´‡§º‡•ç‡§≤‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 * ‡§Ø‡§π ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§ï‡•ã Google ‡§ï‡•á ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
 */
export const initiateGoogleSignInRedirect = async () => {
  if (!auth || !googleProvider) {
    console.error("Firebase Auth not initialized. Cannot initiate Google sign-in redirect.");
    throw new Error("Firebase Auth not available.");
  }
  try {
    console.log("Firebase: Initiating Google Sign-In Redirect. Redirecting browser now...");
    await signInWithRedirect(auth, googleProvider);
    // ‡§Ø‡§π ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡§æ ‡§ï‡•ã‡§à ‡§ï‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤‡•á‡§ó‡§æ‡•§
  } catch (error: any) {
    console.error("Firebase: Error initiating Google Sign-In Redirect:", error);
    throw new Error(`Google Sign-In Redirect Error: ${error.message}`);
  }
};

/**
 * Google ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡•á ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§µ‡§æ‡§™‡§∏ ‡§Ü‡§®‡•á ‡§™‡§∞)‡•§
 * ‡§á‡§∏‡•á AuthProvider ‡§Æ‡•á‡§Ç ‡§ï‡•â‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
 */
export const handleGoogleRedirectResult = async (): Promise<FirebaseUser | null> => {
  if (!auth) {
    console.error("Firebase Auth not initialized. Cannot handle redirect result.");
    return null;
  }
  try {
    console.log("Firebase: Calling getRedirectResult(auth)...");
    const result = await getRedirectResult(auth);
    if (result) {
      const user = result.user;
      console.log("Firebase: ‚úÖ getRedirectResult successful. User found:", user.uid);
      // ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§ü‡•ã‡§ï‡§® ‡§Ø‡§æ ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
      // const credential = GoogleAuthProvider.credentialFromResult(result);
      // const token = credential?.accessToken;
      // const idToken = await user.getIdToken(); 
      return user;
    } else {
      console.log("Firebase: No Google redirect result found from getRedirectResult(auth).");
      return null;
    }
  } catch (error: any) {
    console.error("Firebase: Error handling Google redirect result:", error);
    // ‡§è‡§∞‡§∞ ‡§ï‡•á ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, ‡§Ü‡§™ ‡§Ø‡§π‡§æ‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
    if (error.code === 'auth/cancelled-popup-request') {
        console.warn("Firebase: Redirect was cancelled (e.g., by another login request).");
    } else if (error.code === 'auth/account-exists-with-different-credential') {
        console.error("Firebase: An account with the same email already exists but with different sign-in credentials.");
    }
    throw new Error(`Google Redirect Result Error: ${error.message}`);
  }
};

/**
 * ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 */
export const logout = async () => {
  if (!auth) {
    console.error("Firebase Auth not initialized. Cannot logout.");
    throw new Error("Firebase Auth not available.");
  }
  try {
    console.log("Firebase: Attempting to log out user.");
    await signOut(auth);
    console.log("Firebase: User logged out successfully.");
  } catch (error: any) {
    console.error("Firebase: Error during logout:", error);
    throw new Error(`Logout Error: ${error.message}`);
  }
};
