import { initializeApp } from "firebase/app";
import {
  getAuth,
  signInWithPopup,
  signInWithRedirect,
  getRedirectResult,
  GoogleAuthProvider,
  signOut,
  User as FirebaseUser, // Firebase User ‡§ü‡§æ‡§á‡§™ ‡§ï‡•ã ‡§è‡§≤‡§ø‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
} from "firebase/auth";

// üîê Firebase Configuration
// ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø .env ‡§´‡§æ‡§á‡§≤ ‡§Æ‡•á‡§Ç ‡§Ø‡•á ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§∏‡§π‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§∏‡•á‡§ü ‡§π‡•à‡§Ç
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN, // ‡§ú‡•à‡§∏‡•á "aapani-dukan.firebaseapp.com"
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,   // ‡§ú‡•à‡§∏‡•á "aapani-dukan"
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

// üîå Initialize Firebase App and Auth
// ‡§π‡§Æ ‡§á‡§®‡§ø‡§ü‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§ï‡•ã ‡§è‡§ï try-catch ‡§¨‡•ç‡§≤‡•â‡§ï ‡§Æ‡•á‡§Ç ‡§∞‡•à‡§™ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
// ‡§§‡§æ‡§ï‡§ø ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§è‡§∞‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§™‡§ï‡§°‡§º‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á ‡§î‡§∞ ‡§ï‡§Ç‡§∏‡•ã‡§≤ ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á‡•§
let app;
let authInstance;

try {
  // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø apiKey ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à, ‡§Ö‡§®‡•ç‡§Ø‡§•‡§æ ‡§Ø‡§π ‡§è‡§∞‡§∞ ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
  if (!firebaseConfig.apiKey || firebaseConfig.apiKey === "undefined") {
    throw new Error("Firebase API Key is missing or undefined. Check your .env file and Render environment variables.");
  }

  console.log("Firebase Init: Attempting to initialize Firebase app with config:", {
    projectId: firebaseConfig.projectId,
    apiKeyPreview: firebaseConfig.apiKey ? firebaseConfig.apiKey.substring(0, 5) + "..." : "EMPTY",
  });

  app = initializeApp(firebaseConfig);
  authInstance = getAuth(app);
  
  console.log("Firebase Init: Firebase app and auth initialized successfully.");

} catch (error) {
  console.error("Firebase Init: CRITICAL ERROR during Firebase initialization. This might cause blank pages or auth issues:", error);
  // ‡§Ø‡§¶‡§ø ‡§Ø‡§π ‡§è‡§∞‡§∞ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à, ‡§§‡•ã ‡§ê‡§™ ‡§†‡•Ä‡§ï ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
  // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á .env ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§î‡§∞ Render ‡§ï‡•á Environment Variables ‡§∏‡§π‡•Ä ‡§π‡•à‡§Ç‡•§
}

// Firebase Auth ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏ ‡§ï‡•ã ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ø‡§¶‡§ø ‡§á‡§®‡§ø‡§ü‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§Ø‡§π undefined ‡§π‡•ã‡§ó‡§æ‡•§
export const auth = authInstance;

// üì° Google Provider Setup
// GoogleAuthProvider ‡§ï‡•ã ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è auth ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§
// ‡§Ø‡§¶‡§ø auth ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏ undefined ‡§π‡•à, ‡§§‡•ã GoogleAuthProvider ‡§ï‡•ã ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡§®‡§æ ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
export const googleProvider = auth ? new GoogleAuthProvider() : null; // ‡§Ø‡§¶‡§ø auth undefined ‡§π‡•à ‡§§‡•ã null ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç

if (googleProvider) {
  googleProvider.addScope("email");
  googleProvider.addScope("profile");
  // ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è
  googleProvider.setCustomParameters({ prompt: "select_account" }); 
} else {
  console.error("Firebase: GoogleAuthProvider could not be initialized because Firebase auth failed to initialize.");
}

// üîë Authentication Functions

/**
 * Google ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•â‡§™‡§Ö‡§™ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§∏‡§æ‡§á‡§®-‡§á‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 * (‡§π‡§Æ‡§æ‡§∞‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§´‡§º‡•ç‡§≤‡•ã ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§á‡§∏‡•á ‡§∞‡•á‡§´‡§º‡§∞‡•á‡§Ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ñ‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§)
 */
export const signInWithGoogle = async () => {
  if (!auth || !googleProvider) {
    console.error("Firebase Auth not initialized. Cannot sign in with Google.");
    throw new Error("Firebase Auth not available.");
  }
  try {
    const result = await signInWithPopup(auth, googleProvider);
    const user = result.user;
    console.log("Firebase: User signed in with popup:", user);
    return user;
  } catch (error: any) {
    console.error("Firebase: Error signing in with Google popup:", error);
    // Google ‡§∏‡§æ‡§á‡§®-‡§á‡§® ‡§è‡§∞‡§∞ ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó
    if (error.code === 'auth/popup-closed-by-user') {
      throw new Error("Popup closed by user.");
    } else {
      throw new Error(`Google Sign-In Error: ${error.message}`);
    }
  }
};

/**
 * Google ‡§∏‡§æ‡§á‡§®-‡§á‡§® ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§´‡§º‡•ç‡§≤‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 * ‡§Ø‡§π ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§ï‡•ã Google ‡§ï‡•á ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
 */
export const initiateGoogleSignInRedirect = async () => {
  if (!auth || !googleProvider) {
    console.error("Firebase Auth not initialized. Cannot initiate Google sign-in redirect.");
    throw new Error("Firebase Auth not available.");
  }
  try {
    console.log("Firebase: Initiating Google Sign-In Redirect.");
    await signInWithRedirect(auth, googleProvider);
    // ‡§Ø‡§π ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡§æ ‡§ï‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤‡•á‡§ó‡§æ‡•§
  } catch (error: any) {
    console.error("Firebase: Error initiating Google Sign-In Redirect:", error);
    throw new Error(`Google Sign-In Redirect Error: ${error.message}`);
  }
};

/**
 * Google ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡•á ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§µ‡§æ‡§™‡§∏ ‡§Ü‡§®‡•á ‡§™‡§∞)‡•§
 * ‡§á‡§∏‡•á AuthRedirectGuard ‡§Ø‡§æ app ‡§ï‡•á ‡§∞‡•Ç‡§ü ‡§Æ‡•á‡§Ç ‡§ï‡•â‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
 */
export const handleGoogleRedirectResult = async () => {
  if (!auth) {
    console.error("Firebase Auth not initialized. Cannot handle redirect result.");
    return null;
  }
  try {
    const result = await getRedirectResult(auth);
    if (result) {
      // ‡§Ø‡§π ‡§è‡§ï FirebaseUser ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§π‡•à
      const user = result.user;
      console.log("Firebase: Google Redirect Result - User:", user);
      // ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§ü‡•ã‡§ï‡§® ‡§Ø‡§æ ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç:
      // const credential = GoogleAuthProvider.credentialFromResult(result);
      // const token = credential?.accessToken;
      // const idToken = await user.getIdToken(); // ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•á ID ‡§ü‡•ã‡§ï‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
      return user;
    } else {
      console.log("Firebase: No Google redirect result found.");
      return null;
    }
  } catch (error: any) {
    console.error("Firebase: Error handling Google redirect result:", error);
    throw new Error(`Google Redirect Result Error: ${error.message}`);
  }
};

/**
 * ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 */
export const logout = async () => {
  if (!auth) {
    console.error("Firebase Auth not initialized. Cannot logout.");
    throw new Error("Firebase Auth not available.");
  }
  try {
    console.log("Firebase: Attempting to log out user.");
    await signOut(auth);
    console.log("Firebase: User logged out successfully.");
  } catch (error: any) {
    console.error("Firebase: Error during logout:", error);
    throw new Error(`Logout Error: ${error.message}`);
  }
};

// ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§Ö‡§®‡•ç‡§Ø Firebase ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§ú‡•ã‡§°‡§º‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§ú‡•à‡§∏‡•á Firestore
// import { getFirestore, collection, doc } from "firebase/firestore";
// export const db = app ? getFirestore(app) : null;
