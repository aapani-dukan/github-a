// client/src/lib/queryClient.ts

import { QueryClient } from "@tanstack/react-query";
import { auth } from "@/lib/firebase"; // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø Firebase auth ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§∏‡§π‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: Infinity,
      cacheTime: Infinity,
    },
  },
});

// Production ‡§ï‡•á ‡§≤‡§ø‡§è, Render ‡§™‡§∞ ‡§Ö‡§™‡§®‡•á ‡§¨‡•à‡§ï‡§è‡§Ç‡§° ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ URL ‡§°‡§æ‡§≤‡•á‡§Ç‡•§
// ‡§â‡§¶‡§æ‡§π‡§∞‡§£: "https://your-backend-service.onrender.com"
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || "http://localhost:10000";

export async function apiRequest<T>(
  method: string,
  path: string,
  data?: any
): Promise<Response> {
  const url = `${API_BASE_URL}${path}`;
  const headers: HeadersInit = {
    "Content-Type": "application/json",
  };

  // üî• ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§π‡§Æ ‡§¶‡•á‡§ñ ‡§∏‡§ï‡•á‡§Ç ‡§ï‡§ø apiRequest ‡§ï‡§¨ ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á ‡§ï‡•â‡§≤ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à
  console.log(`[apiRequest] Starting request: ${method} ${url}`);
  console.log(`[apiRequest] Current Firebase user:`, auth.currentUser); // Firebase user ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç

  let token: string | null = null;
  try {
    if (auth.currentUser) {
      token = await auth.currentUser.getIdToken();
      console.log(`[apiRequest] Firebase ID Token obtained: ${token ? 'Yes' : 'No'}`); // ‡§ü‡•ã‡§ï‡§® ‡§Æ‡§ø‡§≤‡§æ ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
    } else {
      console.warn("[apiRequest] No Firebase currentUser available to get ID token.");
    }
  } catch (tokenError) {
    console.error("[apiRequest] Error getting Firebase ID Token:", tokenError);
    // ‡§Ø‡§π‡§æ‡§Ç ‡§è‡§∞‡§∞ ‡§ï‡•ã ‡§•‡•ç‡§∞‡•ã ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§¨‡§ø‡§®‡§æ ‡§ü‡•ã‡§ï‡§® ‡§ï‡•á ‡§≠‡•Ä ‡§π‡•ã ‡§∏‡§ï‡•á
    // ‡§Ø‡§¶‡§ø ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à ‡§§‡•ã ‡§¨‡•à‡§ï‡§è‡§Ç‡§° 401 ‡§¶‡•á‡§ó‡§æ
  }

  if (token) {
    headers["Authorization"] = `Bearer ${token}`;
    console.log("[apiRequest] Authorization header added.");
  } else {
    console.log("[apiRequest] No Authorization header added (no token).");
  }

  // üî• ‡§Ø‡§π‡§æ‡§Ç ‡§≠‡•Ä ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•á‡§Ç, ‡§ñ‡§æ‡§∏‡§ï‡§∞ ‡§¨‡•â‡§°‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è
  console.log(`[apiRequest] Request headers:`, headers);
  console.log(`[apiRequest] Request body (JSON.stringify):`, data ? JSON.stringify(data) : 'No body');


  try {
    const response = await fetch(url, {
      method,
      headers,
      body: data ? JSON.stringify(data) : undefined,
    });

    console.log(`[apiRequest] Received response for ${url}. Status: ${response.status}`);

    if (!response.ok) {
      const errorBody = await response.text();
      console.error(`[apiRequest] API Error Response: ${response.status} ${response.statusText} - ${errorBody}`);
      throw new Error(`API error: ${response.status} ${response.statusText} - ${errorBody}`);
    }

    console.log(`[apiRequest] Request ${url} successful.`);
    return response;
  } catch (fetchError) {
    console.error(`[apiRequest] Fetch operation failed for ${url}:`, fetchError);
    throw fetchError; // ‡§è‡§∞‡§∞ ‡§ï‡•ã ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç
  }
}
