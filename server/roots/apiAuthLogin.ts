// server/roots/apiAuthLogin.ts

import { Router } from 'express';
import * as admin from 'firebase-admin'; // Firebase Admin SDK ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
import { db } from '../db'; // ‡§Ü‡§™‡§ï‡•á db ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏ ‡§ï‡§æ ‡§™‡§æ‡§• ‡§è‡§°‡§ú‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§Ø‡§π server/db.ts ‡§π‡•ã‡§ó‡§æ)
import { users } from '../../shared/backend/schema'; // ‡§Ü‡§™‡§ï‡•á users ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ ‡§ï‡§æ ‡§™‡§æ‡§• ‡§è‡§°‡§ú‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§Ø‡§π ../../shared/backend/schema.ts ‡§π‡•ã‡§ó‡§æ)
import { eq } from 'drizzle-orm';

const router = Router();

// üöÄ POST /login ‡§è‡§Ç‡§°‡§™‡•â‡§á‡§Ç‡§ü (‡§Ø‡§π /api/auth ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§è‡§ó‡§æ)
router.post('/login', async (req, res) => {
  console.log("Backend: POST /api/auth/login received.");

  const authHeader = req.headers.authorization;

  // 1. Authorization ‡§π‡•á‡§°‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    console.error("Backend Error: Authorization header missing or not starting with 'Bearer '.");
    return res.status(400).json({ message: 'ID token is missing.' });
  }

  const idToken = authHeader.split(' ')[1]; // 'Bearer ' ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ü‡•ã‡§ï‡§® ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç

  // 2. ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ü‡•ã‡§ï‡§® ‡§ï‡•á ‡§ï‡•Å‡§õ ‡§≠‡§æ‡§ó ‡§ï‡•ã ‡§≤‡•â‡§ó ‡§ï‡§∞‡•á‡§Ç (‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è)
  console.log("Backend: Extracted ID Token (first 30 chars):", idToken.substring(0, Math.min(idToken.length, 30)));

  try {
    // 3. Firebase Admin SDK ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ID ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
    const decodedToken = await admin.auth().verifyIdToken(idToken);
    console.log("Backend: Firebase ID Token verified successfully. UID:", decodedToken.uid);

    const { email, name, picture } = decodedToken;
    const firebaseUid = decodedToken.uid;

    // 4. ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡§®‡§æ‡§è‡§Å
    let userRecord = await db.select().from(users).where(eq(users.firebaseUid, firebaseUid)).limit(1);

    if (userRecord.length === 0) {
      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§¨‡§®‡§æ‡§è‡§Å
      const [newUser] = await db.insert(users).values({
        firebaseUid,
        email: email || '',
        name: name || email || 'New User',
        role: 'customer', // ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∞‡•ã‡§≤ 'customer'
        profilePicture: picture || null,
        createdAt: new Date(),
      }).returning();
      userRecord = [newUser];
      console.log("Backend: New user created in DB:", newUser);
    } else {
      console.log("Backend: Existing user found in DB:", userRecord[0]);
    }

    // 5. ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§∏‡§´‡§≤ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§≠‡•á‡§ú‡•á‡§Ç
    res.status(200).json({
      uuid: userRecord[0].firebaseUid,
      email: userRecord[0].email,
      name: userRecord[0].name,
      role: userRecord[0].role,
      seller: userRecord[0].sellerId ? {
        id: userRecord[0].sellerId,
        approvalStatus: userRecord[0].sellerApprovalStatus
      } : null
    });

  } catch (error: any) {
    // 6. ‡§ü‡•ã‡§ï‡§® ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§Ø‡§æ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç
    console.error("Backend Error: Failed to verify Firebase ID token or process user:", error);
    if (error.code === 'auth/id-token-expired') {
      return res.status(401).json({ message: 'Token expired. Please sign in again.' });
    }
    // ‡§Ö‡§®‡•ç‡§Ø Firebase Admin SDK ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡•Ä ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    return res.status(401).json({ message: 'Unauthorized: Invalid token or verification failed.' });
  }
});

export default router;
