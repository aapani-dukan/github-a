// server/index.ts
import express, { type Request, type Response, type NextFunction } from "express";
import cors from "cors";
import registerRoutes from "./routes.js";
import { setupVite, log } from "./vite.js"; // setupVite рдФрд░ log рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд┐рдпрд╛

import { createServer, type Server } from "http";
import { drizzle } from "drizzle-orm/node-postgres";
import { migrate } from "drizzle-orm/node-postgres/migrator";
import { Pool } from "pg";
import path from "path";
import { fileURLToPath } from "url";
import * as admin from "firebase-admin"; // рдЗрд╕реЗ Firebase Admin SDK рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝реЗрд╢рди рдХреЗ рд▓рд┐рдП рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ

// тЬЕ ESM-compatible __filename & __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
let server: Server;

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// --- Drizzle Migrations ---
async function runMigrations() {
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    console.error("тЭМ DATABASE_URL environment variable is not set.");
    return;
  }

  const pool = new Pool({
    connectionString,
    ssl: {
      rejectUnauthorized: false,
    },
  });

  const db = drizzle(pool);

  try {
    const migrationsPath = path.resolve(__dirname, "migrations");
    await migrate(db, { migrationsFolder: migrationsPath });
    console.log("тЬЕ Drizzle migrations completed.");
  } catch (error: any) {
    if (error?.code === "42P07") {
      console.warn("тЪая╕П Table already exists. Skipping migration.");
    } else {
      console.error("тЭМ Migration Error:", error);
    }
  } finally {
    try {
      await pool.end();
    } catch (poolError) {
      console.error("тЭМ Failed to close pool:", poolError);
    }
  }
}

// --- Start Server ---
(async () => {
  // app.get('env') рдХреЗрд╡рд▓ Express 4.x рдореЗрдВ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ
  // рдкреНрд░реЛрдбрдХреНрд╢рди рдореЛрдб рдХреЛ process.env.NODE_ENV рд╕реЗ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░рдирд╛ рдЕрдзрд┐рдХ рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд╣реИ
  const isProd = process.env.NODE_ENV === 'production';

  // Firebase Admin SDK рдХреЛ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ (рдпрд╣ рдХреЗрд╡рд▓ рдПрдХ рдмрд╛рд░ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП)
  // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рдЖрдкрдХреЗ `server/lib/firebaseAdmin.ts` рдореЗрдВ рд╣реИ рдФрд░ рдЙрд╕реЗ рдпрд╣реАрдВ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред
  // рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП: import './lib/firebaseAdmin';
  // рдпрджрд┐ рдпрд╣ firebaseAdmin.ts рдореЗрдВ рд╣реИ, рддреЛ рдЖрдкрдХреЛ рдЗрд╕реЗ рдпрд╣рд╛рдВ рдЕрд▓рдЧ рд╕реЗ рдХрд░рдиреЗ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ рд╣реИред
  // рдпрджрд┐ рдЖрдк рдЗрд╕реЗ рдпрд╣рд╛рдВ рд╕реАрдзреЗ рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдХреНрд░реЗрдбреЗрдВрд╢рд┐рдпрд▓ рд╕рд╣реА рд╣реИрдВред
  // рдкреБрд░рд╛рдиреЗ рдХрдореЗрдВрдЯреНрд╕ рдХреЛ рд╣рдЯрд╛ рджрд┐рдпрд╛ рд╣реИ рдЬреЛ Firebase Admin рдХреЛ рдпрд╣рд╛рдВ рдбреБрдкреНрд▓реАрдХреЗрдЯ рдХрд░рддреЗ рдереЗред

  if (isProd) {
    // рдкреНрд░реЛрдбрдХреНрд╢рди рдореЛрдб рдореЗрдВ рдорд╛рдЗрдЧреНрд░реЗрд╢рди рдЪрд▓рд╛рдПрдВ
    await runMigrations();
  } else {
    // рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ рдореЛрдб рдореЗрдВ рдорд╛рдЗрдЧреНрд░реЗрд╢рди рдЪрд▓рд╛рдПрдВ
    await runMigrations();
  }
  console.log("тЬЕ Migrations done. Starting server...");

  // Vite рд╕реЗрдЯрдЕрдк рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВред рдпрд╣ production рдореЗрдВ sirv рдорд┐рдбрд▓рд╡реЗрдпрд░ рдХреЛ рдЬреЛрдбрд╝ рджреЗрдЧрд╛
  // рдФрд░ development рдореЗрдВ Vite middleware рдХреЛред
  await setupVite(app); // <--- рдпрд╣ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ! рдЗрд╕реЗ рд╡рд╛рдкрд╕ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИред

  // API рд░реВрдЯреНрд╕ рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ
  // рдЗрдиреНрд╣реЗрдВ рд╕реНрдЯреИрдЯрд┐рдХ рдлрд╛рдЗрд▓реЗрдВ рд╕рд░реНрд╡ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рд╣реА рд╣реИрдВрдбрд▓ рдХрд┐рдпрд╛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП рддрд╛рдХрд┐
  // /api рд░реВрдЯреНрд╕ рд╕реНрдЯреИрдЯрд┐рдХ рдлрд╛рдЗрд▓реЛрдВ рдХреЗ рд╕рд╛рде рдХреЙрдиреНрдлрд╝реНрд▓рд┐рдХреНрдЯ рди рдХрд░реЗрдВред
  registerRoutes(app);

  if (isProd) {
    // тЬЕ SPA рдХреЗ рд▓рд┐рдП рдХреИрдЪ-рдСрд▓ рдлреЙрд▓рдмреИрдХ
    // рдпрд╣ рд╕рднреА рдЕрдиреНрдп рд░реВрдЯреНрд╕ рдХреЗ рдмрд╛рдж рдЖрдирд╛ рдЪрд╛рд╣рд┐рдП, рдЬрд┐рд╕рдореЗрдВ static file serving рднреА рд╢рд╛рдорд┐рд▓ рд╣реИред
    app.get("*", (req, res) => {
      // sirv рдкрд╣рд▓реЗ рд╣реА /client/dist рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░ рд░рд╣рд╛ рд╣реЛрдЧрд╛
      // рдпрджрд┐ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдХрд┐рд╕реА рднреА рд╕реНрдЯреИрдЯрд┐рдХ рдлрд╛рдЗрд▓ рд╕реЗ рдореИрдЪ рдирд╣реАрдВ рдХрд░рддреА рд╣реИ, рддреЛ index.html рд╕рд░реНрд╡ рдХрд░реЗрдВ
      res.sendFile(path.resolve(__dirname, '..', 'dist', 'public', 'index.html'));
    });
  }

  // ЁЯФ╗ Error handler
  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    console.error("тЭМ Server Error:", err); // Error рдХреЛ рд▓реЙрдЧ рдХрд░реЗрдВ
    res.status(status).json({ message });
    // Production рдореЗрдВ 'throw err' рди рдХрд░реЗрдВ рдХреНрдпреЛрдВрдХрд┐ рдпрд╣ рдкреНрд░реЛрд╕реЗрд╕ рдХреЛ рдХреНрд░реИрд╢ рдХрд░ рджреЗрдЧрд╛ред
    // development рдореЗрдВ рдбрд┐рдмрдЧрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдпрд╣ рдареАрдХ рд╣реИ, рд▓реЗрдХрд┐рди production рдореЗрдВ рдЗрд╕рд╕реЗ рдмрдЪреЗрдВред
    if (process.env.NODE_ENV !== 'production') {
      throw err;
    }
  });

  const port = process.env.PORT || 5000;

  // Development/Production рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рд░реНрд╡рд░ рдХреЛ рд▓рд┐рд╕рди рдХрд░реЗрдВ
  // setupVite рдореЗрдВ рд╣реА Vite server рдХреЛ setup рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ,
  // рддреЛ рдпрд╣рд╛рдВ рдХреЗрд╡рд▓ Node.js HTTP server рдХреЛ рдХреНрд░рд┐рдПрдЯ рдФрд░ рд▓рд┐рд╕рди рдХрд░реЗрдВред
  server = createServer(app);

  server.listen({ port, host: "0.0.0.0" }, () =>
    log(`ЁЯЪА Server listening on port ${port} in ${isProd ? 'production' : 'development'} mode`)
  );
})();

// --- Request Logging for /api routes ---
// рдпрд╣ рдорд┐рдбрд▓рд╡реЗрдпрд░, рдЕрдиреНрдп рдорд┐рдбрд▓рд╡реЗрдпрд░ рдФрд░ рд░реВрдЯреНрд╕ рдХреЗ рдмрд╛рдж рдЖрдирд╛ рдЪрд╛рд╣рд┐рдПред
// рдЗрд╕реЗ (async () => { ... })(); рдмреНрд▓реЙрдХ рдХреЗ рдмрд╛рд╣рд░ рд░рдЦрдиреЗ рд╕реЗ рдпрд╣ рд╕рднреА рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдкрд░ рд▓рд╛рдЧреВ рд╣реЛрдЧрд╛ред
app.use((req, res, next) => {
  const start = Date.now();
  const p = req.path;
  let captured: unknown;

  const orig = res.json.bind(res);
  res.json = (body, ...rest) => {
    captured = body;
    return orig(body, ...rest);
  };

  res.on("finish", () => {
    if (!p.startsWith("/api")) return;
    const ms = Date.now() - start;
    let line = `${req.method} ${p} ${res.statusCode} in ${ms}ms`;
    if (captured) line += ` :: ${JSON.stringify(captured)}`;
    log(line.length > 90 ? line.slice(0, 89) + "тАж" : line);
  });

  next();
});
