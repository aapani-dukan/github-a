// server/seed.ts

import { db } from "./db";
import { faker } from "@faker-js/faker";
import {
  users,
  sellersPgTable as sellers, // sellersPgTable рдХреЛ sellers рдХреЗ рд░реВрдк рдореЗрдВ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд┐рдпрд╛
  categories,
  stores,
  products,
  deliveryBoys,
  orders,
  orderItems,
  cartItems,
  reviews,
  // рд╕реНрдХреАрдорд╛ рд╕реЗ рд╕реАрдзреЗ рдЕрдкреЗрдХреНрд╖рд┐рдд рдкреНрд░рдХрд╛рд░реЛрдВ рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ рдпрджрд┐ рд╡реЗ Drizzle рдХреЗ рд╕рд╛рде рдХрд╛рдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╣реИрдВ
  // рдЬреИрд╕реЗ рдХрд┐ UserRole, ApprovalStatus, ProductApprovalStatusType
  // рдЕрдЧрд░ рдпреЗ schemas/index.ts рдореЗрдВ рдкрд░рд┐рднрд╛рд╖рд┐рдд рд╣реИрдВ, рддреЛ рдЙрдиреНрд╣реЗрдВ рдпрд╣рд╛рдВ рд╕реЗ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
  // рдорд╛рди рд▓реЗрдВ рдХрд┐ schemas рдореЗрдВ рдкрд░рд┐рднрд╛рд╖рд┐рдд types/enums рднреА рд╣реИрдВ
  UserRole,
  ApprovalStatus,
} from "@/shared/backend/schema"; // рдкрд╛рде рдПрд▓рд┐рдпрд╛рд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
import { eq } from "drizzle-orm";

async function seedDatabase() {
  try {
    console.log("тЮбя╕П Starting database seed...");

    // 1я╕ПтГг Clean existing data (order matters due to foreign keys)
    console.log("ЁЯЧСя╕П Cleaning existing data...");
    await db.delete(reviews);
    await db.delete(orderItems);
    await db.delete(orders);
    await db.delete(cartItems);
    await db.delete(products);
    await db.delete(stores);
    await db.delete(sellers);
    await db.delete(deliveryBoys);
    await db.delete(users);
    await db.delete(categories);
    console.log("тЬЕ Existing data cleaned.");


    // 2я╕ПтГг Insert Categories
    console.log("тЮХ Inserting categories...");
    const insertedCategories = await db.insert(categories).values([
      { name: "Fruits", slug: "fruits", description: "Fresh fruits", image: faker.image.url(), isActive: true, sortOrder: 1 },
      { name: "Vegetables", slug: "vegetables", description: "Fresh veggies", image: faker.image.url(), isActive: true, sortOrder: 2 },
    ]).returning();
    console.log(`тЬЕ Inserted ${insertedCategories.length} categories.`);


    // 3я╕ПтГг Insert Users
    console.log("тЮХ Inserting users...");
    const userInputs = [
      { firebaseUid: faker.string.uuid(), email: "admin@example.com", name: "Admin", role: "admin" as UserRole, approvalStatus: "approved" as ApprovalStatus },
      { firebaseUid: faker.string.uuid(), email: "customer@example.com", name: "Customer", role: "customer" as UserRole, approvalStatus: "approved" as ApprovalStatus },
      { firebaseUid: faker.string.uuid(), email: "seller@example.com", name: "Seller", role: "seller" as UserRole, approvalStatus: "approved" as ApprovalStatus },
      { firebaseUid: faker.string.uuid(), email: "delivery@example.com", name: "Delivery", role: "delivery_boy" as UserRole, approvalStatus: "approved" as ApprovalStatus },
    ];
    const insertedUsers = await db.insert(users).values(userInputs).returning();
    const sellerUser = insertedUsers.find(u => u.role === "seller");
    const customerUser = insertedUsers.find(u => u.role === "customer");
    const deliveryUser = insertedUsers.find(u => u.role === "delivery_boy");

    if (!sellerUser) throw new Error("тЭМ Seller user not found.");
    if (!customerUser) throw new Error("тЭМ Customer user not found.");
    if (!deliveryUser) throw new Error("тЭМ Delivery user not found.");
    console.log(`тЬЕ Inserted ${insertedUsers.length} users.`);


    // 4я╕ПтГг Insert Seller
    console.log("тЮХ Inserting seller...");
    const [insertedSeller] = await db.insert(sellers).values({
      userId: sellerUser.id, // Drizzle users table рд╕реЗ `id` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, рди рдХрд┐ `firebaseUid`
      businessName: faker.company.name(),
      businessType: "grocery",
      businessAddress: faker.location.streetAddress(),
      city: "Indore",
      pincode: "452001",
      businessPhone: "9876543210",
      approvalStatus: "approved" as ApprovalStatus, // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ enum type рд╕рд╣реА рд╣реИ
      gstNumber: "22AAAAA0000A1Z5",
      bankAccountNumber: "1234567890",
      ifscCode: "SBIN0000001",
    }).returning();
    if (!insertedSeller?.id) throw new Error("тЭМ Seller insert failed! No seller ID returned.");
    console.log("тЬЕ Seller inserted.");


    // 5я╕ПтГг Insert Store for that Seller
    console.log("тЮХ Inserting store...");
    const [insertedStore] = await db.insert(stores).values({
      sellerId: insertedSeller.id,
      storeName: "My Grocery Store",
      storeType: "grocery",
      address: "123 Main Road",
      city: "Indore",
      pincode: "452001",
      phone: "9999999999",
      isActive: true,
      licenseNumber: "LIC123",
      gstNumber: "22BBBBB0000B1Z6",
    }).returning();

    if (!insertedStore?.id) {
      throw new Error("тЭМ Store insert failed! No store ID returned.");
    }
    console.log("тЬЕ Store inserted.");


    // 6я╕ПтГг Insert Delivery Boy
    console.log("тЮХ Inserting delivery boy...");
    await db.insert(deliveryBoys).values({
      userId: deliveryUser.id, // users table рд╕реЗ `id` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
      email: deliveryUser.email!,
      name: deliveryUser.name!,
      vehicleType: "bike",
      approvalStatus: "approved" as ApprovalStatus,
    });
    console.log("тЬЕ Delivery boy inserted.");


    if (!insertedCategories.length) {
      throw new Error("тЭМ Categories not inserted. Cannot proceed with product insertion.");
    }

    // 7я╕ПтГг Insert Products
    console.log("тЮХ Inserting products...");
    const insertedProducts = await db.insert(products).values(
      insertedCategories.map(cat => {
        const price = faker.commerce.price({ min: 10, max: 200, dec: 2 }); // ensure decimal places
        const originalPrice = (parseFloat(price) * 1.2).toFixed(2); // String conversion and fixed decimal

        return {
          sellerId: insertedSeller.id,
          storeId: insertedStore.id,
          categoryId: cat.id,
          name: faker.commerce.productName(),
          nameHindi: "рд╣рд┐рдВрджреА рдирд╛рдо",
          description: faker.commerce.productDescription(),
          descriptionHindi: "рд╣рд┐рдВрджреА рд╡рд┐рд╡рд░рдг",
          price: price.toString(), // number рдХреЛ string рдореЗрдВ рдмрджрд▓рд╛
          originalPrice: originalPrice.toString(), // number рдХреЛ string рдореЗрдВ рдмрджрд▓рд╛
          image: faker.image.url(),
          images: [faker.image.url(), faker.image.url()], // рдХрдо рд╕реЗ рдХрдо рдПрдХ рдЕрддрд┐рд░рд┐рдХреНрдд рдЫрд╡рд┐ рджреЗрдВ
          unit: "kg",
          stock: 50,
          minOrderQty: 1,
          maxOrderQty: 5,
          isActive: true,
        };
      })
    ).returning();
    console.log(`тЬЕ Inserted ${insertedProducts.length} products.`);


    // 8я╕ПтГг Insert Order
    console.log("тЮХ Inserting order...");
    const [order] = await db.insert(orders).values({
      customerId: customerUser.id, // users table рд╕реЗ `id` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
      deliveryBoyId: null, // nullable рд╣реИ рддреЛ null рдареАрдХ рд╣реИ
      orderNumber: "ORD-" + Date.now(),
      subtotal: "0.00", // string рдХреЗ рд░реВрдк рдореЗрдВ
      deliveryCharge: "0.00", // string рдХреЗ рд░реВрдк рдореЗрдВ
      discount: "0.00", // string рдХреЗ рд░реВрдк рдореЗрдВ
      total: "0.00", // string рдХреЗ рд░реВрдк рдореЗрдВ
      paymentMethod: "cod",
      paymentStatus: "paid",
      status: "placed",
      deliveryAddress: {
        address: "Customer Street",
        city: "Indore",
        pincode: "452001",
      },
    }).returning();
    if (!order?.id) throw new Error("тЭМ Order insert failed! No order ID returned.");
    console.log("тЬЕ Order inserted.");


    // 9я╕ПтГг Order Items
    console.log("тЮХ Inserting order items...");
    let totalOrderValue = 0; // рдХреБрд▓ рдСрд░реНрдбрд░ рдореВрд▓реНрдп рдХреЗ рд▓рд┐рдП рдПрдХ рдирдпрд╛ рд╡реЗрд░рд┐рдПрдмрд▓
    const items = insertedProducts.slice(0, 2).map(p => { // рдХреБрдЫ рд╣реА рдкреНрд░реЛрдбрдХреНрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рдЖрдЗрдЯрдо рдмрдирд╛рдПрдВ
      const qty = 2;
      const unitPrice = parseFloat(p.price || "0"); // string price рдХреЛ number рдореЗрдВ рдмрджрд▓реЗрдВ
      const totalPrice = (unitPrice * qty).toFixed(2); // 2 decimal places рдФрд░ string
      totalOrderValue += parseFloat(totalPrice); // рдХреБрд▓ рдпреЛрдЧ рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ

      return {
        orderId: order.id,
        productId: p.id,
        sellerId: insertedSeller.id,
        quantity: qty,
        unitPrice: unitPrice.toString(), // number рдХреЛ string рдореЗрдВ рдмрджрд▓рд╛
        totalPrice: totalPrice.toString(), // number рдХреЛ string рдореЗрдВ рдмрджрд▓рд╛
      };
    });
    await db.insert(orderItems).values(items);
    await db.update(orders).set({
      subtotal: totalOrderValue.toFixed(2).toString(), // string рдХреЗ рд░реВрдк рдореЗрдВ
      total: totalOrderValue.toFixed(2).toString() // string рдХреЗ рд░реВрдк рдореЗрдВ
    }).where(eq(orders.id, order.id));
    console.log(`тЬЕ Inserted ${items.length} order items and updated order total.`);


    // ЁЯФЯ Reviews
    console.log("тЮХ Inserting reviews...");
    // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдСрд░реНрдбрд░ рдореЗрдВ рдЙрддреНрдкрд╛рдж рд╣реИрдВ
    if (insertedProducts.length > 0) {
      await db.insert(reviews).values([
        {
          customerId: customerUser.id,
          productId: insertedProducts[0].id, // рдкрд╣рд▓реЗ рдкреНрд░реЛрдбрдХреНрдЯ рдХреЗ рд▓рд┐рдП
          orderId: order.id,
          rating: 4,
          comment: "Nice product!",
        },
        {
          customerId: customerUser.id,
          productId: insertedProducts[0].id, // рдкрд╣рд▓реЗ рдкреНрд░реЛрдбрдХреНрдЯ рдХреЗ рд▓рд┐рдП
          orderId: order.id,
          rating: 5,
          comment: "Excellent quality!",
        }
      ]);
      console.log("тЬЕ Reviews inserted.");
    } else {
      console.log("тЪая╕П No products to review. Skipping review insertion.");
    }


    // ЁЯФБ Cart Items
    console.log("тЮХ Inserting cart items...");
    // рд╕рд┐рд░реНрдл рдкрд╣рд▓реЗ рджреЛ рдкреНрд░реЛрдбрдХреНрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рдХрд╛рд░реНрдЯ рдЖрдЗрдЯрдо рдбрд╛рд▓реЗрдВ, рддрд╛рдХрд┐ рдмрд╣реБрдд рдЬреНрдпрд╛рджрд╛ рди рд╣реЛрдВ
    await db.insert(cartItems).values(insertedProducts.slice(0, 2).map(p => ({
      userId: customerUser.id,
      productId: p.id,
      quantity: 1,
    })));
    console.log(`тЬЕ Inserted ${insertedProducts.slice(0, 2).length} cart items.`);

    console.log("ЁЯОЙ Seed complete! Database is populated.");

  } catch (err: any) {
    console.error("тЭМ Seeding failed:", err.message || err);
    process.exit(1); // Exit with an error code
  }
}

// рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ seedDatabase рдХреЛ рдХреЙрд▓ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рдЗрд╕реЗ рд╕реАрдзреЗ рдХреЙрд▓ рдХрд░реЗрдВ
seedDatabase();
